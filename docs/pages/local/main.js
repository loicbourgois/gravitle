import{resize_square,stroke_circle,stroke_circle_2,fill_circle_2,fill_circle,clear,line,fill_text}from"../canvas";import{colors}from"../colors";import{collision_response,distance_sqrd,wrap_around,normalize,delta,rotate,add,del,mul,mod}from"../math";import{get_fps,update_fps,get_ups,update_ups,get_ups_avg_delta}from"./perf";import{ship_0,ship_2,ship_1,emerald}from"./ship";const LINK_STRENGH=.2,GRID_SIDE=20,CELL_COUNT=400,html=()=>'\n    <div>\n      <p id="move_with_instructions"></p>\n      <p> <a href="garage">Go to Garage</a> </p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div>\n      <p>FPS: <span id="fps">...</span></p>\n      <p><span id="points"></span></p>\n      <p>UPS: <span id="ups">...</span></p>\n    </div>\n  ',style=()=>"\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    a {\n      color: #ffa;\n      text-decoration: none;\n      background-color: #fff0;\n      padding: 0.8rem;\n    }\n    a:hover {\n      background-color: #fff2;\n    }\n    #content > div {\n      width: 0;\n      flex-grow: 1;\n      display: flex;\n      justify-content: space-around;\n      flex-direction: column;\n      height: 100%;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n    }\n    p span {\n      color: #ffa;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n    }\n    body {\n      background: #113;\n    }\n  ",grid_id=e=>20*parseInt(20*e.y)+parseInt(20*e.x),grid_id_2=e=>20*parseInt(e.y)+parseInt(e.x),grid_id_3=(e,n)=>20*n+e,DIAM=.0125;let points=0;const parts=[],parts_deleted=new Set,links=[],links_set=new Set,grid=[],grid_ids=[];for(var x=0;x<20;x++)for(var y=0;y<20;y++){const e=[(x-1+20)%20,(x+20)%20,(x+1+20)%20],n=[(y-1+20)%20,(y+20)%20,(y+1+20)%20],d=grid_id_3(x,y);grid_ids.push([]),grid_ids[d]=[grid_id_3(e[0],n[0]),grid_id_3(e[0],n[1]),grid_id_3(e[0],n[2]),grid_id_3(e[1],n[0]),grid_id_3(e[1],n[1]),grid_id_3(e[1],n[2]),grid_id_3(e[2],n[0]),grid_id_3(e[2],n[1]),grid_id_3(e[2],n[2])],grid.push(new Set)}const add_part=(e,n,d,i,t)=>{const r=parts.length;return parts.push({idx:r,kind:t,d:DIAM,dp:{x:d,y:i},pp:{x:e-d,y:n-i},p:{x:e,y:n},np:{x:e,y:n},collision_response:{x:0,y:0,count:0},link_response:{x:0,y:0},links:new Set,direction:{x:0,y:0}}),r},add_link=(e,n,d)=>{const i=e<n?`${e}|${n}`:`${n}|${e}`;links_set.has(i)&&!d||(links.push({a:e,b:n}),links_set.add(i),parts[e].links.add(n),parts[n].links.add(e))},key_bindings=new Map,add_player_ship=(e,n,d)=>{const i=parts.length;for(let i of e.parts){const t=add_part((i.p.x-e.center.x)/e.DIAM*DIAM+n,(i.p.y-e.center.y)/e.DIAM*DIAM+d,0,0,i.kind);parts[t].player_id=1,i.binding&&(key_bindings.has(i.binding)||key_bindings.set(i.binding,new Set),key_bindings.get(i.binding).add(t))}for(let n of e.links)add_link(n.a+i,n.b+i)},add_ship=(e,n,d)=>{const i=parts.length,t=parts.length+1;add_part(n-.00625,d,0,0,e.p1),add_part(n+.00625,d,0,0,e.p2);for(let n of e.parts){const e=parts[i+n[0]],d=parts[i+n[1]],t=rotate(e.p,d.p,1/6),r=add_part(t.x,t.y,0,0,n[2]);add_link(r,e.idx),add_link(r,d.idx)}add_link(i,t);for(let n of e.links)add_link(n[0]+i,n[1]+i);for(let n of Object.keys(e.key_bindings)){key_bindings.has(n)||key_bindings.set(n,new Set);for(let d of e.key_bindings[n])key_bindings.get(n).add(d+i)}},average_color=(e,n)=>(e={r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)},n={r:parseInt(n[1],16),g:parseInt(n[2],16),b:parseInt(n[3],16)},`rgb(${.5*(e.r+n.r)*17},${.5*(e.g+n.g)*17},${.5*(e.b+n.b)*17})`),render=e=>{update_fps(),clear(e);for(let n of parts)n.deleted||(n.activated&&"booster"==n.kind?(fill_circle_2(e,add(n.p,mul(n.direction,.007+.003*Math.random())),.7*n.d,colors[n.kind].value_3),fill_circle_2(e,add(n.p,mul(n.direction,.005+.001*Math.random())),.9*n.d,colors[n.kind].value_2),fill_circle_2(e,n.p,n.d,colors[n.kind].value_1)):fill_circle_2(e,n.p,n.d,colors[n.kind].value));for(let n of Object.keys(colors))for(let d of links){const i=parts[d.a],t=parts[d.b];if(i.deleted||t.deleted||d.deleted)continue;const r=wrap_around(i.np,t.np),s=mul(delta(r.a,r.b),.5),o=colors[i.kind].score>colors[t.kind].score?i.kind:t.kind;if(n==o){const n=colors[o].value,d=.75;fill_circle_2(e,add(i.p,s),i.d*d,n),fill_circle_2(e,del(t.p,s),t.d*d,n)}}for(let e of links){const n=parts[e.a],d=parts[e.b],i=wrap_around(n.np,d.np);delta(i.a,i.b)}for(let e of parts);document.getElementById("fps").innerHTML=get_fps(),document.getElementById("ups").innerHTML=get_ups(),document.getElementById("points").innerHTML=points,window.requestAnimationFrame((()=>{render(e)}))},update_grid=()=>{for(var e=0;e<400;e++)grid[e].clear();for(let e of parts){const n=grid_id(e.p);grid[n].add(e.idx),e.grid_id=n}},neighbours=e=>{const n=grid_id(e);return new Set([...grid[grid_ids[n][0]],...grid[grid_ids[n][1]],...grid[grid_ids[n][2]],...grid[grid_ids[n][3]],...grid[grid_ids[n][4]],...grid[grid_ids[n][5]],...grid[grid_ids[n][6]],...grid[grid_ids[n][7]],...grid[grid_ids[n][8]]])},compute=()=>{update_grid();let e=0;for(let n of parts)if(!n.deleted){n.direction={x:0,y:0};for(let e of n.links){const d=parts[e],i=wrap_around(n.p,d.p);n.direction=add(n.direction,delta(i.b,i.a))}n.direction=normalize(n.direction),n.dp.x=n.p.x-n.pp.x,n.dp.y=n.p.y-n.pp.y,"booster"==n.kind&&n.activated&&(n.dp.x-=1e-4*n.direction.x,n.dp.y-=1e-4*n.direction.y),n.np.x=n.p.x+n.dp.x,n.np.y=n.p.y+n.dp.y,n.link_response.x=0,n.link_response.y=0,n.collision_response.x=0,n.collision_response.y=0,n.collision_response.count=0,e+=distance_sqrd(n.dp)}for(let e of parts)if(!e.deleted)for(let n of neighbours(e.p)){const d=parts[n];if(!d.deleted&&e.idx<d.idx){const n=wrap_around(e.np,d.np);n.a.np={x:n.a.x,y:n.a.y},n.b.np={x:n.b.x,y:n.b.y},n.a.dp=e.dp,n.b.dp=d.dp;const i=n.d_sqrd,t=.5*(e.d+d.d);if(i<t*t){let i=null;e.player_id&&"emerald"==d.kind?i=d.idx:d.player_id&&"emerald"==e.kind&&(i=e.idx),i&&(parts[i].deleted=!0,parts_deleted.add(i),points+=1);let t=collision_response(n.a,n.b);links_set.has(`${e.idx}|${d.idx}`)&&(t.x*=.5,t.y*=.5),e.collision_response.x-=t.x,e.collision_response.y-=t.y,e.collision_response.count+=1,d.collision_response.x+=t.x,d.collision_response.y+=t.y,d.collision_response.count+=1}}}for(let e of links){const n=parts[e.a],d=parts[e.b];if(n.deleted&&d.deleted&&(e.deleted=!0),n.deleted||d.deleted||e.deleted)continue;const i=wrap_around(n.np,d.np),t=Math.sqrt(i.d_sqrd),r=normalize(delta(i.a,i.b),t),s=.2*(.5*(n.d+d.d)-t);n.link_response.x-=r.x*s*.5,n.link_response.y-=r.y*s*.5,d.link_response.x+=r.x*s*.5,d.link_response.y+=r.y*s*.5}for(let e of parts)e.deleted||(e.collision_response.count&&(e.collision_response.x/=e.collision_response.count,e.collision_response.y/=e.collision_response.count,e.np.x+=e.collision_response.x,e.np.y+=e.collision_response.y,e.np.x+=e.link_response.x,e.np.y+=e.link_response.y),e.p.x=(e.np.x+1)%1,e.p.y=(e.np.y+1)%1,e.pp.x=e.p.x-e.dp.x-e.collision_response.x-e.link_response.x,e.pp.y=e.p.y-e.dp.y-e.collision_response.y-e.link_response.y);for(var n=0;n<emeralds.length;n++){const e=emeralds[n];let i=0;for(var d of e)parts[d].deleted&&(i+=1);4===i&&(emeralds[n]=new_emerald())}update_ups(),window.setTimeout((()=>{compute()}),10-get_ups_avg_delta())},emeralds=[],is_in_emerald=e=>{for(var n of emeralds)for(var d of n)if(e==d)return!0},get_free_idx=()=>{if(parts_deleted.size){const e=parts_deleted.keys().next().value;if(!is_in_emerald(e))return parts_deleted.delete(e),e}const e=parts.length;return parts.push({}),e},new_emerald=(e,n)=>{for(var d of(e||(e=.8*Math.random()+.1),n||(n=.8*Math.random()+.1),parts))if(wrap_around(d.p,{x:e,y:n}).d_sqrd<DIAM*DIAM*4*4)return new_emerald();const i=new Set;for(var t=0;t<4;t++)i.add(get_free_idx());return add_ship_2(emerald,e,n,[...i]),i},add_ship_2=(e,n,d,i)=>{const t=i[0],r=i[1];set_part(n-.00625,d,0,0,e.p1,i[0]),set_part(n+.00625,d,0,0,e.p2,i[1]);for(var s=0;s<e.parts.length;s++){const n=e.parts[s],d=parts[i[n[0]]],t=parts[i[n[1]]],r=rotate(d.p,t.p,1/6),o=i[s+2];set_part(r.x,r.y,0,0,n[2],o),add_link(o,d.idx,!0),add_link(o,t.idx,!0)}add_link(t,r,!0);for(let n of e.links)add_link(i[n[0]],i[n[1]],!0);for(let n of Object.keys(e.key_bindings)){key_bindings.has(n)||key_bindings.set(n,new Set);for(let d of e.key_bindings[n])key_bindings.get(n).add(i[d])}},set_part=(e,n,d,i,t,r)=>(parts[r]={idx:r,kind:t,d:DIAM,dp:{x:d,y:i},pp:{x:e-d,y:n-i},p:{x:e,y:n},np:{x:e,y:n},collision_response:{x:0,y:0,count:0},link_response:{x:0,y:0},links:new Set,direction:{x:0,y:0}},r),add_emerald=(e,n)=>{add_ship(emerald,e,n),emeralds.push(new Set([parts.length-4,parts.length-3,parts.length-2,parts.length-1]))},local_main=()=>{document.querySelector("#content").innerHTML='\n    <div>\n      <p id="move_with_instructions"></p>\n      <p> <a href="garage">Go to Garage</a> </p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div>\n      <p>FPS: <span id="fps">...</span></p>\n      <p><span id="points"></span></p>\n      <p>UPS: <span id="ups">...</span></p>\n    </div>\n  ';const e=document.createElement("style");document.head.appendChild(e);for(let n of"\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    a {\n      color: #ffa;\n      text-decoration: none;\n      background-color: #fff0;\n      padding: 0.8rem;\n    }\n    a:hover {\n      background-color: #fff2;\n    }\n    #content > div {\n      width: 0;\n      flex-grow: 1;\n      display: flex;\n      justify-content: space-around;\n      flex-direction: column;\n      height: 100%;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n    }\n    p span {\n      color: #ffa;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n    }\n    body {\n      background: #113;\n    }\n  ".split("}"))try{e.sheet.insertRule(n+"}")}catch(e){}const n=document.querySelector("#canvas");resize_square(n);const d=n.getContext("2d");localStorage.getItem("ship")||localStorage.setItem("ship",ship_1),add_player_ship(JSON.parse(localStorage.getItem("ship")),.5,.5),add_ship(ship_2,.27,.5),add_ship(ship_2,.5,.27),add_ship(ship_2,.73,.5),add_ship(ship_2,.5,.73),add_ship(ship_2,.8,.8),add_ship(ship_2,.2,.8),add_ship(ship_2,.8,.2),add_ship(ship_2,.2,.2),add_emerald(.5,.6),add_emerald(.6,.5),add_emerald(.4,.5),add_emerald(.5,.4),render(d),compute(),document.addEventListener("keydown",(e=>{if(key_bindings.get(e.key))for(let n of key_bindings.get(e.key))parts[n].activated=!0})),document.addEventListener("keyup",(e=>{if(key_bindings.get(e.key))for(let n of key_bindings.get(e.key))parts[n].activated=!1}));const i=new Set;for(let e of key_bindings){const n=e[0],d=e[1];for(let e of d)"booster"==parts[e].kind&&i.add(n)}i.size&&(document.querySelector("#move_with_instructions").innerHTML=`Move with ${Array.from(i).map((e=>e.toUpperCase())).join(", ")}`)};export{local_main};