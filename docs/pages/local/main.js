import{resize_square,stroke_circle,stroke_circle_2,fill_circle_2,fill_circle,clear,line,fill_text}from"../canvas";import{colors}from"../colors";import{collision_response,distance_sqrd,wrap_around,normalize,delta,rotate,add,del,mul,mod}from"../math";import{get_fps,update_fps,get_ups,update_ups,get_ups_avg_delta}from"./perf";import{ship_0,ship_2,ship_1,emerald}from"./ship";const LINK_STRENGH=.2,GRID_SIDE=20,CELL_COUNT=400,DIAM=.0125,LOADING_AWAIT=1;let scores=[0,0],CONTINUE_RENDER=!0;const html=()=>`\n    <div id="winner" class="hide">\n      <p><span id="winner_name">..</span> Wins!</p>\n      <button onclick="again()">Play Again</button>\n    </div>\n    <div class="bob">\n      <p><span id="score_player_1"></span></p>\n      <p id="move_with_instructions">Loading...</p>\n      <p>${select_mode()}</p>\n      <p> <a href="garage">Go to Garage</a> </p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div class="bob">\n      <p><span id="score_player_2"></span></p>\n      <p>FPS: <span id="fps">...</span></p>\n      <p>UPS: <span id="ups">...</span></p>\n      <p> <a href="https://github.com/loicbourgois/gravitle">Github</a> </p>\n    </div>\n  `,update_select_mode_option=()=>{const n=document.querySelector("#select_mode").value;localStorage.setItem("select_mode_option",n),again()},select_mode=()=>{const n=localStorage.getItem("select_mode_option"),e=[{value:"first_16",text:"First to 16"},{value:"first_32",text:"First to 32"}].map((e=>`<option value=${e.value} ${e.value==n?"selected":""}>${e.text}</option>`));return`<select id="select_mode" onchange="update_select_mode_option()">\n    ${e}\n  </select>`},style=()=>"\n    * {\n      color: #ffa;\n      background: #113;\n      font-size: 1.05rem;\n    }\n    select {\n      border: none;\n    }\n    option {\n    }\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    a {\n      color: #ffa;\n      text-decoration: none;\n      background-color: #fff0;\n      padding: 0.8rem;\n    }\n    a:hover {\n      background-color: #fff2;\n    }\n    #score_player_1, #score_player_2 {\n      font-size: 2rem;\n    }\n    #content > div.bob {\n      width: 0;\n      flex-grow: 1;\n      display: flex;\n      justify-content: space-around;\n      flex-direction: column;\n      height: 100%;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n    }\n    p span {\n      color: #ffa;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n    }\n    body {\n      background: #113;\n    }\n    #winner {\n      position: absolute;\n      height: 100vh;\n      width: 100vw;\n      background: #0000;\n      display: flex;\n      flex-direction: column;\n      align-content: center;\n      align-items: center;\n      justify-content: center;\n      pointer-events: none;\n    }\n    #winner > p {\n      background: #ffaa;\n      padding: 5rem;\n      border-radius: 10rem;\n      border: solid 5px #ffa;\n    }\n    #winner > p > span, #winner > p  {\n      color: #ffa;\n      font-size: 3rem;\n    }\n    #winner > p > span {\n      background: transparent;\n    }\n    #winner > button {\n      border: none;\n      margin: 2rem;\n      cursor: pointer;\n      pointer-events: all;\n      padding: 1rem;\n      border-radius: 10rem;\n    }\n    #winner > button:hover {\n      background: #fff2;\n    }\n    .hide {\n      display: none !important;\n    }\n  ",grid_id=n=>20*parseInt(20*n.y)+parseInt(20*n.x),grid_id_2=n=>20*parseInt(n.y)+parseInt(n.x),grid_id_3=(n,e)=>20*e+n,grid_ids=[],grid=[];for(var x=0;x<20;x++)for(var y=0;y<20;y++){const n=[(x-1+20)%20,(x+20)%20,(x+1+20)%20],e=[(y-1+20)%20,(y+20)%20,(y+1+20)%20],i=grid_id_3(x,y);grid_ids.push([]),grid_ids[i]=[grid_id_3(n[0],e[0]),grid_id_3(n[0],e[1]),grid_id_3(n[0],e[2]),grid_id_3(n[1],e[0]),grid_id_3(n[1],e[1]),grid_id_3(n[1],e[2]),grid_id_3(n[2],e[0]),grid_id_3(n[2],e[1]),grid_id_3(n[2],e[2])],grid.push(new Set)}let winner,parts=[],parts_deleted=new Set,links=[],links_set=new Set,key_bindings=new Map,emeralds=[],key_allowed=!1;const sleep=n=>new Promise(n?e=>setTimeout(e,n):n=>n()),add_part=(n,e,i,r,t)=>{const o=parts.length;return parts.push({idx:o,kind:t,d:DIAM,dp:{x:i,y:r},pp:{x:n-i,y:e-r},p:{x:n,y:e},np:{x:n,y:e},collision_response:{x:0,y:0,count:0},link_response:{x:0,y:0},links:new Set,direction:{x:0,y:0}}),o},add_link=(n,e,i)=>{const r=n<e?`${n}|${e}`:`${e}|${n}`;links_set.has(r)&&!i||(links.push({a:n,b:e}),links_set.add(r),parts[n].links.add(e),parts[e].links.add(n))},add_player_ship=async(n,e,i)=>{const r=parts.length;for(let r of n.parts){const t=add_part((r.p.x-n.center.x)/n.DIAM*DIAM+e,(r.p.y-n.center.y)/n.DIAM*DIAM+i,0,0,r.kind);parts[t].player_id=r.player_id,r.binding&&(key_bindings.has(r.binding)||key_bindings.set(r.binding,new Set),key_bindings.get(r.binding).add(t)),await sleep(1)}for(let e of n.links)add_link(e.a+r,e.b+r),await sleep(1)},add_ship=async(n,e,i)=>{const r=parts.length,t=parts.length+1;add_part(e-.00625,i,0,0,n.p1),await sleep(1),add_part(e+.00625,i,0,0,n.p2),await sleep(1);for(let e of n.parts){const n=parts[r+e[0]],i=parts[r+e[1]],t=rotate(n.p,i.p,1/6),o=add_part(t.x,t.y,0,0,e[2]);add_link(o,n.idx),await sleep(1),add_link(o,i.idx),await sleep(1)}add_link(r,t),await sleep(1);for(let e of n.links)add_link(e[0]+r,e[1]+r),await sleep(1);for(let e of Object.keys(n.key_bindings)){key_bindings.has(e)||key_bindings.set(e,new Set);for(let i of n.key_bindings[e])key_bindings.get(e).add(i+r)}},average_color=(n,e)=>(n={r:parseInt(n[1],16),g:parseInt(n[2],16),b:parseInt(n[3],16)},e={r:parseInt(e[1],16),g:parseInt(e[2],16),b:parseInt(e[3],16)},`rgb(${.5*(n.r+e.r)*17},${.5*(n.g+e.g)*17},${.5*(n.b+e.b)*17})`),render=n=>{update_fps(),clear(n);for(let e of parts)e.deleted||(e.activated&&"booster"==e.kind?(fill_circle_2(n,add(e.p,mul(e.direction,.007+.003*Math.random())),.7*e.d,colors[e.kind].value_3),fill_circle_2(n,add(e.p,mul(e.direction,.005+.001*Math.random())),.9*e.d,colors[e.kind].value_2),fill_circle_2(n,e.p,e.d,colors[e.kind].value_1)):"booster"==e.kind?fill_circle_2(n,e.p,e.d,colors[e.kind].value):fill_circle_2(n,e.p,e.d,colors[e.kind].value[e.player_id]));for(let e of Object.keys(colors))for(let i of links){const r=parts[i.a],t=parts[i.b];if(r.deleted||t.deleted||i.deleted)continue;const o=wrap_around(r.np,t.np),s=mul(delta(o.a,o.b),.5),d=colors[r.kind].score>colors[t.kind].score?r.kind:t.kind;if(e==d){const e=colors[d].value[r.player_id],i=.75;fill_circle_2(n,add(r.p,s),r.d*i,e),fill_circle_2(n,del(t.p,s),t.d*i,e)}}for(let n of links){const e=parts[n.a],i=parts[n.b],r=wrap_around(e.np,i.np);delta(r.a,r.b)}for(let n of parts);document.getElementById("fps").innerHTML=get_fps(),document.getElementById("ups").innerHTML=get_ups(),document.getElementById("score_player_1").innerHTML=scores[0],document.getElementById("score_player_2").innerHTML=scores[1],CONTINUE_RENDER?window.requestAnimationFrame((()=>{render(n)})):again_2()},update_grid=()=>{for(var n=0;n<400;n++)grid[n].clear();for(let n of parts){const e=grid_id(n.p);grid[e].add(n.idx),n.grid_id=e}},neighbours=n=>{const e=grid_id(n);return new Set([...grid[grid_ids[e][0]],...grid[grid_ids[e][1]],...grid[grid_ids[e][2]],...grid[grid_ids[e][3]],...grid[grid_ids[e][4]],...grid[grid_ids[e][5]],...grid[grid_ids[e][6]],...grid[grid_ids[e][7]],...grid[grid_ids[e][8]]])},compute=()=>{update_grid();let n=0;for(let e of parts)if(!e.deleted){e.direction={x:0,y:0};for(let n of e.links){const i=parts[n],r=wrap_around(e.p,i.p);e.direction=add(e.direction,delta(r.b,r.a))}e.direction=normalize(e.direction),e.dp.x=e.p.x-e.pp.x,e.dp.y=e.p.y-e.pp.y,"booster"==e.kind&&e.activated&&(e.dp.x-=1e-4*e.direction.x,e.dp.y-=1e-4*e.direction.y),e.np.x=e.p.x+e.dp.x,e.np.y=e.p.y+e.dp.y,e.link_response.x=0,e.link_response.y=0,e.collision_response.x=0,e.collision_response.y=0,e.collision_response.count=0,n+=distance_sqrd(e.dp)}for(let n of parts)if(!n.deleted)for(let e of neighbours(n.p)){const i=parts[e];if(!i.deleted&&n.idx<i.idx){const e=wrap_around(n.np,i.np);e.a.np={x:e.a.x,y:e.a.y},e.b.np={x:e.b.x,y:e.b.y},e.a.dp=n.dp,e.b.dp=i.dp;const r=e.d_sqrd,t=.5*(n.d+i.d);if(r<t*t){let r=null,t=null;void 0!==n.player_id&&"emerald"==i.kind?(r=i.idx,t=n.player_id):void 0!==i.player_id&&"emerald"==n.kind&&(r=n.idx,t=i.player_id),r&&(parts[r].deleted=!0,parts_deleted.add(r),scores[t]+=1);let o=collision_response(e.a,e.b);links_set.has(`${n.idx}|${i.idx}`)&&(o.x*=.5,o.y*=.5),n.collision_response.x-=o.x,n.collision_response.y-=o.y,n.collision_response.count+=1,i.collision_response.x+=o.x,i.collision_response.y+=o.y,i.collision_response.count+=1}}}for(let n of links){const e=parts[n.a],i=parts[n.b];if(e.deleted&&i.deleted&&(n.deleted=!0),e.deleted||i.deleted||n.deleted)continue;const r=wrap_around(e.np,i.np),t=Math.sqrt(r.d_sqrd),o=normalize(delta(r.a,r.b),t),s=.2*(.5*(e.d+i.d)-t);e.link_response.x-=o.x*s*.5,e.link_response.y-=o.y*s*.5,i.link_response.x+=o.x*s*.5,i.link_response.y+=o.y*s*.5}for(let n of parts)n.deleted||(n.collision_response.count&&(n.collision_response.x/=n.collision_response.count,n.collision_response.y/=n.collision_response.count,n.np.x+=n.collision_response.x,n.np.y+=n.collision_response.y,n.np.x+=n.link_response.x,n.np.y+=n.link_response.y),n.p.x=(n.np.x+1)%1,n.p.y=(n.np.y+1)%1,n.pp.x=n.p.x-n.dp.x-n.collision_response.x-n.link_response.x,n.pp.y=n.p.y-n.dp.y-n.collision_response.y-n.link_response.y);for(var e=0;e<emeralds.length;e++){const n=emeralds[e];let r=0;for(var i of n)parts[i].deleted&&(r+=1);4===r&&(emeralds[e]=new_emerald())}update_ups(),winning_condition(),window.setTimeout((()=>{compute()}),10-get_ups_avg_delta())},winning_condition=()=>{if(null!=winner)return;let n=1/0;"first_16"==document.querySelector("#select_mode").value?n=16:"first_32"==document.querySelector("#select_mode").value&&(n=32);for(var e=0;e<scores.length;e++)scores[e]>=n&&(winner=e,console.log(`${e} wins`));null!=winner&&(document.querySelector("#winner").classList.remove("hide"),document.querySelector("#winner_name").innerHTML={0:"Blue",1:"Green"}[winner])},is_in_emerald=n=>{for(var e of emeralds)for(var i of e)if(n==i)return!0},get_free_idx=()=>{if(parts_deleted.size){const n=parts_deleted.keys().next().value;if(!is_in_emerald(n))return parts_deleted.delete(n),n}const n=parts.length;return parts.push({}),n},new_emerald=(n,e)=>{for(var i of(n||(n=.8*Math.random()+.1),e||(e=.8*Math.random()+.1),parts))if(wrap_around(i.p,{x:n,y:e}).d_sqrd<DIAM*DIAM*4*4)return new_emerald();const r=new Set;for(var t=0;t<4;t++)r.add(get_free_idx());return add_ship_2(emerald,n,e,[...r]),r},add_ship_2=(n,e,i,r)=>{const t=r[0],o=r[1];set_part(e-.00625,i,0,0,n.p1,r[0]),set_part(e+.00625,i,0,0,n.p2,r[1]);for(var s=0;s<n.parts.length;s++){const e=n.parts[s],i=parts[r[e[0]]],t=parts[r[e[1]]],o=rotate(i.p,t.p,1/6),d=r[s+2];set_part(o.x,o.y,0,0,e[2],d),add_link(d,i.idx,!0),add_link(d,t.idx,!0)}add_link(t,o,!0);for(let e of n.links)add_link(r[e[0]],r[e[1]],!0);for(let e of Object.keys(n.key_bindings)){key_bindings.has(e)||key_bindings.set(e,new Set);for(let i of n.key_bindings[e])key_bindings.get(e).add(r[i])}},set_part=(n,e,i,r,t,o)=>(parts[o]={idx:o,kind:t,d:DIAM,dp:{x:i,y:r},pp:{x:n-i,y:e-r},p:{x:n,y:e},np:{x:n,y:e},collision_response:{x:0,y:0,count:0},link_response:{x:0,y:0},links:new Set,direction:{x:0,y:0}},o),again=()=>{CONTINUE_RENDER=!1},again_2=async()=>{CONTINUE_RENDER=!0,console.log("again"),parts=[],parts_deleted=new Set,links=[],links_set=new Set,key_bindings=new Map,emeralds=[],key_allowed=!1,winner=void 0,scores=[0,0],document.querySelector("#content").innerHTML=`\n    <div id="winner" class="hide">\n      <p><span id="winner_name">..</span> Wins!</p>\n      <button onclick="again()">Play Again</button>\n    </div>\n    <div class="bob">\n      <p><span id="score_player_1"></span></p>\n      <p id="move_with_instructions">Loading...</p>\n      <p>${select_mode()}</p>\n      <p> <a href="garage">Go to Garage</a> </p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div class="bob">\n      <p><span id="score_player_2"></span></p>\n      <p>FPS: <span id="fps">...</span></p>\n      <p>UPS: <span id="ups">...</span></p>\n      <p> <a href="https://github.com/loicbourgois/gravitle">Github</a> </p>\n    </div>\n  `;const n=document.createElement("style");document.head.appendChild(n);for(let e of"\n    * {\n      color: #ffa;\n      background: #113;\n      font-size: 1.05rem;\n    }\n    select {\n      border: none;\n    }\n    option {\n    }\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    a {\n      color: #ffa;\n      text-decoration: none;\n      background-color: #fff0;\n      padding: 0.8rem;\n    }\n    a:hover {\n      background-color: #fff2;\n    }\n    #score_player_1, #score_player_2 {\n      font-size: 2rem;\n    }\n    #content > div.bob {\n      width: 0;\n      flex-grow: 1;\n      display: flex;\n      justify-content: space-around;\n      flex-direction: column;\n      height: 100%;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n    }\n    p span {\n      color: #ffa;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n    }\n    body {\n      background: #113;\n    }\n    #winner {\n      position: absolute;\n      height: 100vh;\n      width: 100vw;\n      background: #0000;\n      display: flex;\n      flex-direction: column;\n      align-content: center;\n      align-items: center;\n      justify-content: center;\n      pointer-events: none;\n    }\n    #winner > p {\n      background: #ffaa;\n      padding: 5rem;\n      border-radius: 10rem;\n      border: solid 5px #ffa;\n    }\n    #winner > p > span, #winner > p  {\n      color: #ffa;\n      font-size: 3rem;\n    }\n    #winner > p > span {\n      background: transparent;\n    }\n    #winner > button {\n      border: none;\n      margin: 2rem;\n      cursor: pointer;\n      pointer-events: all;\n      padding: 1rem;\n      border-radius: 10rem;\n    }\n    #winner > button:hover {\n      background: #fff2;\n    }\n    .hide {\n      display: none !important;\n    }\n  ".split("}"))try{n.sheet.insertRule(e+"}")}catch(n){}const e=document.querySelector("#canvas");resize_square(e);const i=e.getContext("2d"),r="2022.08.09";localStorage.getItem("ship")&&localStorage.getItem("version")===r||(localStorage.setItem("ship",ship_1),localStorage.setItem("version",r)),render(i),key_allowed=!1,await add_player_ship(JSON.parse(localStorage.getItem("ship")),.5,.5);const t=new Set;for(let n of key_bindings){const e=n[0],i=n[1];for(let n of i)"booster"==parts[n].kind&&t.add(e)}t.size&&(document.querySelector("#move_with_instructions").innerHTML=`Move with ${Array.from(t).map((n=>n.toUpperCase())).join(", ")}`),await add_ship(ship_2,.27,.5),await add_ship(ship_2,.5,.27),await add_ship(ship_2,.73,.5),await add_ship(ship_2,.5,.73),await add_ship(ship_2,.8,.8),await add_ship(ship_2,.2,.8),await add_ship(ship_2,.8,.2),await add_ship(ship_2,.2,.2),emeralds.push(new_emerald()),emeralds.push(new_emerald()),console.log("go"),key_allowed=!0},local_main=async()=>{window.update_select_mode_option=update_select_mode_option,window.again=again,document.addEventListener("keydown",(n=>{if(key_bindings.get(n.key)&&key_allowed)for(let e of key_bindings.get(n.key))parts[e].activated=!0})),document.addEventListener("keyup",(n=>{if(key_bindings.get(n.key))for(let e of key_bindings.get(n.key))parts[e].activated=!1})),again_2(),compute()};export{local_main};