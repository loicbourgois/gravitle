import{set_css,set_html}from"../utils";import{render,render_skeleton}from"../render";import{resize_square}from"../canvas";import{rotate,add,distance_sqrd}from"../math";const html=()=>'\n    <div>\n      <p>Build and customize ships in the garage.</p>\n      <p>Big circles are for parts.</p>\n      <p>Small circles are for links.</p>\n      <p>Hover on a part and press a key to bind it. Press again to unbind.</p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div>\n      <p><select id="select_player_id">\n        <option value="0">Player 1</option>\n        <option value="1">Player 2</option>\n      </select></p>\n      <p><select id="select_kind">\n        <option value="armor">Armor</option>\n        <option value="booster">Booster</option>\n        <option value="core">Core</option>\n      </select></p>\n      <p>Parts: <span id="parts_count">...</span></p>\n      <p>Links: <span id="links_count">...</span></p>\n      <p><button id="go_button">Let\'s Go</button></p>\n      \x3c!--<button id="reset_button">Reset</button>\n      <button id="save_button">Save</button>--\x3e\n    </div>\n  ',css=()=>"\n    * {\n      color: #ffa;\n      background: transparent;\n    }\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    button {\n      border: none;\n      padding: 0.8rem;\n      background: #fff1;\n    }\n    button:hover {\n      cursor: pointer;\n      background: #fff2;\n    }\n    #content > div {\n      width: 0;\n      flex-grow: 1;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n      margin: 2rem;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n        cursor: none;\n    }\n    body {\n      background: #113;\n    }\n    select {\n      border: none;\n      background: #fff2;\n      padding: 0.8rem;\n    }\n  ",parts=[],links=[],links_map=new Map,options=[],link_options=[],is_inside=(n,e,t=1)=>distance_sqrd(n,e.p)<e.d*e.d*.25*t,add_part=(n,e,t,o,i,r,s=DIAM)=>{const d=parts.length;return parts.push({idx:d,kind:i,d:s,p:{x:n,y:e},player_id:r,links:new Set,direction:{x:0,y:0}}),add_links(parts[d]),d},add_link=(n,e)=>{const t=n<e?`${n}|${e}`:`${e}|${n}`;let o=parts[n],i=parts[e];if(links_map.has(t))return links_map.get(t);{const r=links.length;return links.push({idx:r,a:n,b:e,d:.5*DIAM,p:{x:.5*(o.p.x+i.p.x),y:.5*(o.p.y+i.p.y)}}),links_map.set(t,r),parts[n].links.add({part_idx:e,link_idx:r}),parts[e].links.add({part_idx:n,link_idx:r}),r}},add_links=n=>{const e=add(n.p,{x:1*DIAM,y:0});for(var t=0;t<6;t++){const o=rotate(n.p,e,t/6);for(let e of parts)if(is_inside(o,e)&&!e.deleted){const t=add_link(n.idx,e.idx);links[t].deleted=!1}}},DIAM=.04,add_option=(n,e,t=DIAM)=>{for(let t of options)if(is_inside({x:n,y:e},t))return;const o=options.length;options.push({idx:o,d:t,p:{x:n,y:e},kind:"option"})},add_link_option=(n,e,t=DIAM)=>{for(let t of link_options)if(is_inside({x:n,y:e},t))return;const o=[],i=add({x:n,y:e},{x:.5*DIAM,y:0});for(var r=0;r<6;r++){const t=rotate({x:n,y:e},i,r/6);for(let n of parts)!n.deleted&&is_inside(t,n,.2)&&o.push(n.idx)}if(2!=o.length)return;const s=link_options.length;link_options.push({idx:s,d:t,p:{x:n,y:e},kind:"link-option"})},add_options=n=>{const e=add(n.p,{x:DIAM,y:0}),t=add(n.p,{x:.5*DIAM,y:0});for(var o=0;o<6;o++){const i=rotate(n.p,e,o/6);add_option(i.x,i.y);const r=rotate(n.p,t,o/6);add_link_option(r.x,r.y,.5*DIAM)}},reset_options=()=>{options.length=0,link_options.length=0;for(let n of parts)n.deleted||add_options(n);save_ship()},mouse_position={x:-1,y:-1},save_ship=()=>{localStorage.setItem("ship",JSON.stringify(small_ship(true_ship()))),console.log("Ship saved")},true_ship=()=>{const n=JSON.parse(JSON.stringify(links)),e=JSON.parse(JSON.stringify(parts));let t=0;for(let n of e)n.deleted||(e[n.idx].idx_mieux=t,t+=1);const o=[],i=[];for(let n of e)n.deleted||o.push({p:{x:.25*(n.p.x-.5)+.8,y:.25*(n.p.y-.5)+.8},d:.25*n.d,np:{x:.25*(n.p.x-.5)+.8,y:.25*(n.p.y-.5)+.8},player_id:n.player_id,kind:n.kind,binding:n.binding});for(let t of n)t.deleted||i.push({a:e[t.a].idx_mieux,b:e[t.b].idx_mieux});return{links:i,parts:o,center:{x:.8,y:.8},DIAM:.25*DIAM}},small_ship=n=>{const e=JSON.parse(JSON.stringify(n));for(let n of e.parts)delete n.np;return e},render_loop=n=>{render_skeleton(n,parts,options,link_options,mouse_position,links),document.querySelector("#parts_count").innerHTML=parts.filter((n=>!n.deleted)).length,document.querySelector("#links_count").innerHTML=links.filter((n=>!n.deleted)).length;const e=true_ship();render(n,e.parts,e.links),window.requestAnimationFrame((()=>{render_loop(n)}))},garage_main=()=>{set_html('\n    <div>\n      <p>Build and customize ships in the garage.</p>\n      <p>Big circles are for parts.</p>\n      <p>Small circles are for links.</p>\n      <p>Hover on a part and press a key to bind it. Press again to unbind.</p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div>\n      <p><select id="select_player_id">\n        <option value="0">Player 1</option>\n        <option value="1">Player 2</option>\n      </select></p>\n      <p><select id="select_kind">\n        <option value="armor">Armor</option>\n        <option value="booster">Booster</option>\n        <option value="core">Core</option>\n      </select></p>\n      <p>Parts: <span id="parts_count">...</span></p>\n      <p>Links: <span id="links_count">...</span></p>\n      <p><button id="go_button">Let\'s Go</button></p>\n      \x3c!--<button id="reset_button">Reset</button>\n      <button id="save_button">Save</button>--\x3e\n    </div>\n  '),set_css("\n    * {\n      color: #ffa;\n      background: transparent;\n    }\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    button {\n      border: none;\n      padding: 0.8rem;\n      background: #fff1;\n    }\n    button:hover {\n      cursor: pointer;\n      background: #fff2;\n    }\n    #content > div {\n      width: 0;\n      flex-grow: 1;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n      margin: 2rem;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n        cursor: none;\n    }\n    body {\n      background: #113;\n    }\n    select {\n      border: none;\n      background: #fff2;\n      padding: 0.8rem;\n    }\n  ");const n=document.querySelector("#canvas");n.addEventListener("click",(n=>{const e=(n.x-n.target.offsetLeft)/n.target.width,t=1-(n.y-n.target.offsetTop)/n.target.height;for(let n of parts)if(is_inside({x:e,y:t},n)){if(n.deleted=!n.deleted,n.deleted)for(var o of n.links)links[o.link_idx].deleted=!0;else add_links(n),n.kind=document.querySelector("#select_kind").value,n.player_id=document.querySelector("#select_player_id").value;return void reset_options()}for(let n of options)if(is_inside({x:e,y:t},n))return add_part(n.p.x,n.p.y,0,0,document.querySelector("#select_kind").value,document.querySelector("#select_player_id").value),void reset_options()})),n.addEventListener("mousemove",(n=>{const e=(n.x-n.target.offsetLeft)/n.target.width,t=1-(n.y-n.target.offsetTop)/n.target.height;mouse_position.x=e,mouse_position.y=t})),document.addEventListener("keydown",(n=>{for(let e of parts)is_inside(mouse_position,e)&&(e.binding===n.key?e.binding=null:e.binding=n.key)})),document.querySelector("#go_button").addEventListener("click",(()=>{save_ship(),window.location.href=".."}));const e=n.getContext("2d");resize_square(n),render_loop(e);const t=JSON.parse(localStorage.getItem("ship")),o=t.DIAM/DIAM;if(t&&t.parts.length){for(let n of t.parts)parts.push({idx:parts.length,p:{x:(n.p.x-t.center.x)/o+.5,y:(n.p.y-t.center.y)/o+.5},d:n.d/o,kind:n.kind,binding:n.binding,player_id:n.player_id,links:new Set,direction:{x:0,y:0}});for(let n of t.links)add_link(n.a,n.b)}else add_part(.5,.5,0,0,"core");reset_options()};export{garage_main};