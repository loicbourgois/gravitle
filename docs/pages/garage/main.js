import{set_css,set_html}from"./utils";import{render,render_skeleton}from"../render";import{resize_square}from"../canvas";import{rotate,add,distance_sqrd}from"../math";const html=()=>'\n    <div>\n      <p>Build and customize ships in the garage.</p>\n      <p>Big circles are for parts.</p>\n      <p>Small circles are for links.</p>\n      <p>Hover on a part and press a key to bind it. Press again to unbind.</p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div>\n      <p><select id="select_kind">\n        <option value="armor">Armor</option>\n        <option value="booster">Booster</option>\n        <option value="core">Core</option>\n      </select></p>\n      <p>Parts: <span id="parts_count">...</span></p>\n      <p>Links: <span id="links_count">...</span></p>\n      <p><button id="go_button">Let\'s Go</button></p>\n      \x3c!--<button id="reset_button">Reset</button>\n      <button id="save_button">Save</button>--\x3e\n    </div>\n  ',css=()=>"\n    * {\n      color: #ffa;\n      background: transparent;\n    }\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    button {\n      border: none;\n      padding: 0.8rem;\n      background: #fff1;\n    }\n    button:hover {\n      cursor: pointer;\n      background: #fff2;\n    }\n    #content > div {\n      width: 0;\n      flex-grow: 1;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n      margin: 2rem;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n        cursor: none;\n    }\n    body {\n      background: #113;\n    }\n    select {\n      border: none;\n      background: #fff2;\n      padding: 0.8rem;\n    }\n  ",parts=[],links=[],links_map=new Map,options=[],link_options=[],is_inside=(n,t,e=1)=>distance_sqrd(n,t.p)<t.d*t.d*.25*e,add_part=(n,t,e,o,i,s=DIAM)=>{const r=parts.length;return parts.push({idx:r,kind:i,d:s,p:{x:n,y:t},links:new Set,direction:{x:0,y:0}}),add_links(parts[r]),r},add_link=(n,t)=>{const e=n<t?`${n}|${t}`:`${t}|${n}`;let o=parts[n],i=parts[t];if(links_map.has(e))return links_map.get(e);{const s=links.length;return links.push({idx:s,a:n,b:t,d:.5*DIAM,p:{x:.5*(o.p.x+i.p.x),y:.5*(o.p.y+i.p.y)}}),links_map.set(e,s),parts[n].links.add({part_idx:t,link_idx:s}),parts[t].links.add({part_idx:n,link_idx:s}),s}},add_links=n=>{const t=add(n.p,{x:1*DIAM,y:0});for(var e=0;e<6;e++){const o=rotate(n.p,t,e/6);for(let t of parts)if(is_inside(o,t)&&!t.deleted){const e=add_link(n.idx,t.idx);links[e].deleted=!1}}},DIAM=.05,add_option=(n,t,e=DIAM)=>{for(let e of options)if(is_inside({x:n,y:t},e))return;const o=options.length;options.push({idx:o,d:e,p:{x:n,y:t},kind:"option"})},add_link_option=(n,t,e=DIAM)=>{for(let e of link_options)if(is_inside({x:n,y:t},e))return;const o=[],i=add({x:n,y:t},{x:.5*DIAM,y:0});for(var s=0;s<6;s++){const e=rotate({x:n,y:t},i,s/6);for(let n of parts)!n.deleted&&is_inside(e,n,.2)&&o.push(n.idx)}if(2!=o.length)return;const r=link_options.length;link_options.push({idx:r,d:e,p:{x:n,y:t},kind:"link-option"})},add_options=n=>{const t=add(n.p,{x:DIAM,y:0}),e=add(n.p,{x:.5*DIAM,y:0});for(var o=0;o<6;o++){const i=rotate(n.p,t,o/6);add_option(i.x,i.y);const s=rotate(n.p,e,o/6);add_link_option(s.x,s.y,.5*DIAM)}},reset_options=()=>{options.length=0,link_options.length=0;for(let n of parts)n.deleted||add_options(n);save_ship()},mouse_position={x:-1,y:-1},save_ship=()=>{localStorage.setItem("ship",JSON.stringify(small_ship(true_ship()))),console.log("Ship saved")},garage_main=()=>{set_html('\n    <div>\n      <p>Build and customize ships in the garage.</p>\n      <p>Big circles are for parts.</p>\n      <p>Small circles are for links.</p>\n      <p>Hover on a part and press a key to bind it. Press again to unbind.</p>\n    </div>\n    <canvas id="canvas"></canvas>\n    <div>\n      <p><select id="select_kind">\n        <option value="armor">Armor</option>\n        <option value="booster">Booster</option>\n        <option value="core">Core</option>\n      </select></p>\n      <p>Parts: <span id="parts_count">...</span></p>\n      <p>Links: <span id="links_count">...</span></p>\n      <p><button id="go_button">Let\'s Go</button></p>\n      \x3c!--<button id="reset_button">Reset</button>\n      <button id="save_button">Save</button>--\x3e\n    </div>\n  '),set_css("\n    * {\n      color: #ffa;\n      background: transparent;\n    }\n    #content {\n      display: flex;\n      width: 100%;\n      height: 100%;\n      align-content: center;\n      align-items: center;\n      flex-direction: row;\n    }\n    button {\n      border: none;\n      padding: 0.8rem;\n      background: #fff1;\n    }\n    button:hover {\n      cursor: pointer;\n      background: #fff2;\n    }\n    #content > div {\n      width: 0;\n      flex-grow: 1;\n    }\n    p {\n      text-align: center;\n      color: #ffa;\n      font-family: monospace;\n      margin: 2rem;\n    }\n    #canvas {\n        background: #113;\n        display:flex;\n        position: unset;\n        cursor: none;\n    }\n    body {\n      background: #113;\n    }\n    select {\n      border: none;\n      background: #fff2;\n      padding: 0.8rem;\n    }\n  ");const n=document.querySelector("#canvas");n.addEventListener("click",(n=>{const t=(n.x-n.target.offsetLeft)/n.target.width,e=1-(n.y-n.target.offsetTop)/n.target.height;for(let n of parts)if(is_inside({x:t,y:e},n)){if(n.deleted=!n.deleted,n.deleted)for(var o of n.links)links[o.link_idx].deleted=!0;else add_links(n),n.kind=document.querySelector("#select_kind").value;return void reset_options()}for(let n of options)if(is_inside({x:t,y:e},n))return add_part(n.p.x,n.p.y,0,0,document.querySelector("#select_kind").value),void reset_options()})),n.addEventListener("mousemove",(n=>{const t=(n.x-n.target.offsetLeft)/n.target.width,e=1-(n.y-n.target.offsetTop)/n.target.height;mouse_position.x=t,mouse_position.y=e})),document.addEventListener("keydown",(n=>{for(let t of parts)is_inside(mouse_position,t)&&(t.binding===n.key?t.binding=null:t.binding=n.key)})),document.querySelector("#go_button").addEventListener("click",(()=>{save_ship(),window.location.href=".."}));const t=n.getContext("2d");resize_square(n),render_loop(t);const e=JSON.parse(localStorage.getItem("ship"));if(e&&e.parts.length){for(let n of e.parts)parts.push({idx:parts.length,p:{x:(n.p.x-.8)/.25+.5,y:(n.p.y-.8)/.25+.5},d:n.d/.25,kind:n.kind,binding:n.binding,links:new Set,direction:{x:0,y:0}});for(let n of e.links)add_link(n.a,n.b)}else add_part(.5,.5,0,0,"core");reset_options()},true_ship=()=>{const n=JSON.parse(JSON.stringify(links)),t=JSON.parse(JSON.stringify(parts));let e=0;for(let n of t)n.deleted||(t[n.idx].idx_mieux=e,e+=1);const o=[],i=[];for(let n of t)n.deleted||o.push({p:{x:.25*(n.p.x-.5)+.8,y:.25*(n.p.y-.5)+.8},d:.25*n.d,np:{x:.25*(n.p.x-.5)+.8,y:.25*(n.p.y-.5)+.8},kind:n.kind,binding:n.binding});for(let e of n)e.deleted||i.push({a:t[e.a].idx_mieux,b:t[e.b].idx_mieux});return{links:i,parts:o,center:{x:.8,y:.8},DIAM:.25*DIAM}},small_ship=n=>{const t=JSON.parse(JSON.stringify(n));for(let n of t.parts)delete n.np;return t},render_loop=n=>{render_skeleton(n,parts,options,link_options,mouse_position,links),document.querySelector("#parts_count").innerHTML=parts.filter((n=>!n.deleted)).length,document.querySelector("#links_count").innerHTML=links.filter((n=>!n.deleted)).length;const t=true_ship();render(n,t.parts,t.links),window.requestAnimationFrame((()=>{render_loop(n)}))};export{garage_main};