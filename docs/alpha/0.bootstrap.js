(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[0],{

/***/ "../pkg/gravitle.js":
/*!**************************!*\
  !*** ../pkg/gravitle.js ***!
  \**************************/
/*! exports provided: __wbg_log_db0ce4382904de06, __widl_f_now_Performance, __widl_instanceof_Window, __widl_f_performance_Window, __wbg_newnoargs_9fab447a311888a5, __wbg_call_001e26aeb2fdef67, __wbindgen_throw, Collision, Intersection, LinkIntersection, LinkToCreate, Trajectory, Universe, WrapAround, __wbindgen_object_clone_ref, __wbindgen_object_drop_ref */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_log_db0ce4382904de06\", function() { return __wbg_log_db0ce4382904de06; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_now_Performance\", function() { return __widl_f_now_Performance; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_instanceof_Window\", function() { return __widl_instanceof_Window; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__widl_f_performance_Window\", function() { return __widl_f_performance_Window; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_newnoargs_9fab447a311888a5\", function() { return __wbg_newnoargs_9fab447a311888a5; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbg_call_001e26aeb2fdef67\", function() { return __wbg_call_001e26aeb2fdef67; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_throw\", function() { return __wbindgen_throw; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Collision\", function() { return Collision; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Intersection\", function() { return Intersection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinkIntersection\", function() { return LinkIntersection; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"LinkToCreate\", function() { return LinkToCreate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Trajectory\", function() { return Trajectory; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"Universe\", function() { return Universe; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"WrapAround\", function() { return WrapAround; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_clone_ref\", function() { return __wbindgen_object_clone_ref; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"__wbindgen_object_drop_ref\", function() { return __wbindgen_object_drop_ref; });\n/* harmony import */ var _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachedTextEncoder = new TextEncoder('utf-8');\n\nlet cachegetUint8Memory = null;\nfunction getUint8Memory() {\n    if (cachegetUint8Memory === null || cachegetUint8Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint8Memory = new Uint8Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint8Memory;\n}\n\nlet passStringToWasm;\nif (typeof cachedTextEncoder.encodeInto === 'function') {\n    passStringToWasm = function(arg) {\n\n        let size = arg.length;\n        let ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](size);\n        let writeOffset = 0;\n        while (true) {\n            const view = getUint8Memory().subarray(ptr + writeOffset, ptr + size);\n            const { read, written } = cachedTextEncoder.encodeInto(arg, view);\n            writeOffset += written;\n            if (read === arg.length) {\n                break;\n            }\n            arg = arg.substring(read);\n            ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_realloc\"](ptr, size, size += arg.length * 3);\n        }\n        WASM_VECTOR_LEN = writeOffset;\n        return ptr;\n    };\n} else {\n    passStringToWasm = function(arg) {\n\n        const buf = cachedTextEncoder.encode(arg);\n        const ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](buf.length);\n        getUint8Memory().set(buf, ptr);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    };\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8');\n\nfunction getStringFromWasm(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory().subarray(ptr, ptr + len));\n}\n\nlet cachedGlobalArgumentPtr = null;\nfunction globalArgumentPtr() {\n    if (cachedGlobalArgumentPtr === null) {\n        cachedGlobalArgumentPtr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_global_argument_ptr\"]();\n    }\n    return cachedGlobalArgumentPtr;\n}\n\nlet cachegetUint32Memory = null;\nfunction getUint32Memory() {\n    if (cachegetUint32Memory === null || cachegetUint32Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetUint32Memory = new Uint32Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetUint32Memory;\n}\n\nlet cachegetFloat64Memory = null;\nfunction getFloat64Memory() {\n    if (cachegetFloat64Memory === null || cachegetFloat64Memory.buffer !== _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer) {\n        cachegetFloat64Memory = new Float64Array(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"memory\"].buffer);\n    }\n    return cachegetFloat64Memory;\n}\n\nfunction getArrayF64FromWasm(ptr, len) {\n    return getFloat64Memory().subarray(ptr / 8, ptr / 8 + len);\n}\n\nfunction passArray32ToWasm(arg) {\n    const ptr = _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_malloc\"](arg.length * 4);\n    getUint32Memory().set(arg, ptr / 4);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nfunction __wbg_log_db0ce4382904de06(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    console.log(varg0);\n}\n\nconst heap = new Array(32);\n\nheap.fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction __widl_f_now_Performance(arg0) {\n    return getObject(arg0).now();\n}\n\nfunction __widl_instanceof_Window(idx) { return getObject(idx) instanceof Window ? 1 : 0; }\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction isLikeNone(x) {\n    return x === undefined || x === null;\n}\n\nfunction __widl_f_performance_Window(arg0) {\n\n    const val = getObject(arg0).performance;\n    return isLikeNone(val) ? 0 : addHeapObject(val);\n\n}\n\nfunction __wbg_newnoargs_9fab447a311888a5(arg0, arg1) {\n    let varg0 = getStringFromWasm(arg0, arg1);\n    return addHeapObject(new Function(varg0));\n}\n\nfunction handleError(exnptr, e) {\n    const view = getUint32Memory();\n    view[exnptr / 4] = 1;\n    view[exnptr / 4 + 1] = addHeapObject(e);\n}\n\nfunction __wbg_call_001e26aeb2fdef67(arg0, arg1, exnptr) {\n    try {\n        return addHeapObject(getObject(arg0).call(getObject(arg1)));\n    } catch (e) {\n        handleError(exnptr, e);\n    }\n}\n\nfunction __wbindgen_throw(ptr, len) {\n    throw new Error(getStringFromWasm(ptr, len));\n}\n\nfunction freeCollision(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_collision_free\"](ptr);\n}\n/**\n*/\nclass Collision {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Collision.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeCollision(ptr);\n    }\n\n    /**\n    * @param {number} particle_1_index\n    * @param {number} particle_2_index\n    * @returns {Collision}\n    */\n    static new(particle_1_index, particle_2_index) {\n        return Collision.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_new\"](particle_1_index, particle_2_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_1_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_get_particle_1_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_2_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"collision_get_particle_2_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeIntersection(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_intersection_free\"](ptr);\n}\n/**\n*/\nclass Intersection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Intersection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeIntersection(ptr);\n    }\n\n    /**\n    * @param {number} intersection_x\n    * @param {number} intersection_y\n    * @param {number} link_id\n    * @param {number} particle_id\n    * @returns {Intersection}\n    */\n    static new(intersection_x, intersection_y, link_id, particle_id) {\n        return Intersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_new\"](intersection_x, intersection_y, link_id, particle_id));\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_x() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_intersection_x\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_y() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_intersection_y\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_link_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_link_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"intersection_get_particle_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeLinkIntersection(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_linkintersection_free\"](ptr);\n}\n/**\n*/\nclass LinkIntersection {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinkIntersection.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeLinkIntersection(ptr);\n    }\n\n    /**\n    * @param {number} intersection_x\n    * @param {number} intersection_y\n    * @param {number} link_1_index\n    * @param {number} link_2_index\n    * @returns {LinkIntersection}\n    */\n    static new(intersection_x, intersection_y, link_1_index, link_2_index) {\n        return LinkIntersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_new\"](intersection_x, intersection_y, link_1_index, link_2_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_x() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_intersection_x\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_y() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_intersection_y\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_link_1_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_link_1_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_link_2_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linkintersection_get_link_2_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeLinkToCreate(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_linktocreate_free\"](ptr);\n}\n/**\n*/\nclass LinkToCreate {\n\n    static __wrap(ptr) {\n        const obj = Object.create(LinkToCreate.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeLinkToCreate(ptr);\n    }\n\n    /**\n    * @param {number} particle_1_index\n    * @param {number} particle_2_index\n    * @returns {LinkToCreate}\n    */\n    static new(particle_1_index, particle_2_index) {\n        return LinkToCreate.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linktocreate_new\"](particle_1_index, particle_2_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_1_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linktocreate_get_particle_1_index\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_2_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"linktocreate_get_particle_2_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction freeTrajectory(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_trajectory_free\"](ptr);\n}\n/**\n*/\nclass Trajectory {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Trajectory.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeTrajectory(ptr);\n    }\n\n}\n\nfunction freeUniverse(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_universe_free\"](ptr);\n}\n/**\n*/\nclass Universe {\n\n    static __wrap(ptr) {\n        const obj = Object.create(Universe.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeUniverse(ptr);\n    }\n\n    /**\n    * @returns {Universe}\n    */\n    static new() {\n        return Universe.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_new\"]());\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    load_from_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_load_from_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {void}\n    */\n    tick() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_tick\"](this.ptr);\n    }\n    /**\n    * @returns {void}\n    */\n    reset() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_reset\"](this.ptr);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    set_particles_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_particles_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    set_links_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_links_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} json_string\n    * @returns {void}\n    */\n    add_particle_json(json_string) {\n        const ptr0 = passStringToWasm(json_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_add_particle_json\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} algorithm_string\n    * @returns {void}\n    */\n    set_algorithm_from_string(algorithm_string) {\n        const ptr0 = passStringToWasm(algorithm_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_algorithm_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} collision_behavior_string\n    * @returns {void}\n    */\n    set_collision_behavior_from_string(collision_behavior_string) {\n        const ptr0 = passStringToWasm(collision_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_collision_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} intersection_behavior_string\n    * @returns {void}\n    */\n    set_intersection_behavior_from_string(intersection_behavior_string) {\n        const ptr0 = passStringToWasm(intersection_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_intersection_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} link_intersection_behavior_string\n    * @returns {void}\n    */\n    set_link_intersection_behavior_from_string(link_intersection_behavior_string) {\n        const ptr0 = passStringToWasm(link_intersection_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_link_intersection_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {string} wrap_around_behavior_string\n    * @returns {void}\n    */\n    set_wrap_around_behavior_from_string(wrap_around_behavior_string) {\n        const ptr0 = passStringToWasm(wrap_around_behavior_string);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_wrap_around_behavior_from_string\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {boolean} wrap_around\n    * @returns {void}\n    */\n    set_wrap_around(wrap_around) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_wrap_around\"](this.ptr, wrap_around);\n    }\n    /**\n    * @param {number} minimal_distance_for_gravity\n    * @returns {void}\n    */\n    set_minimal_distance_for_gravity(minimal_distance_for_gravity) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_minimal_distance_for_gravity\"](this.ptr, minimal_distance_for_gravity);\n    }\n    /**\n    * @param {number} default_link_length\n    * @returns {void}\n    */\n    set_default_link_length(default_link_length) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_default_link_length\"](this.ptr, default_link_length);\n    }\n    /**\n    * @param {number} default_link_strengh\n    * @returns {void}\n    */\n    set_default_link_strengh(default_link_strengh) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_default_link_strengh\"](this.ptr, default_link_strengh);\n    }\n    /**\n    * @param {number} default_link_thrust_force\n    * @returns {void}\n    */\n    set_default_link_thrust_force(default_link_thrust_force) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_default_link_thrust_force\"](this.ptr, default_link_thrust_force);\n    }\n    /**\n    * @param {number} drag_coefficient\n    * @returns {void}\n    */\n    set_drag_coefficient(drag_coefficient) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_drag_coefficient\"](this.ptr, drag_coefficient);\n    }\n    /**\n    * @param {boolean} stabilise_positions_enabled\n    * @returns {void}\n    */\n    set_stabilise_positions_enabled(stabilise_positions_enabled) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_stabilise_positions_enabled\"](this.ptr, stabilise_positions_enabled);\n    }\n    /**\n    * @param {number} stabiliser_power\n    * @returns {void}\n    */\n    set_stabiliser_power(stabiliser_power) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_stabiliser_power\"](this.ptr, stabiliser_power);\n    }\n    /**\n    * @param {number} gravitational_constant\n    * @returns {void}\n    */\n    set_gravitational_constant(gravitational_constant) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_gravitational_constant\"](this.ptr, gravitational_constant);\n    }\n    /**\n    * @param {number} default_push_force\n    * @returns {void}\n    */\n    set_default_push_force(default_push_force) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_default_push_force\"](this.ptr, default_push_force);\n    }\n    /**\n    * @param {number} width\n    * @returns {void}\n    */\n    set_width(width) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_width\"](this.ptr, width);\n    }\n    /**\n    * @param {number} height\n    * @returns {void}\n    */\n    set_height(height) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_height\"](this.ptr, height);\n    }\n    /**\n    * @param {number} delta_time\n    * @returns {void}\n    */\n    set_delta_time(delta_time) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_delta_time\"](this.ptr, delta_time);\n    }\n    /**\n    * @param {boolean} fixed_clone_count\n    * @returns {void}\n    */\n    set_fixed_clone_count(fixed_clone_count) {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_set_fixed_clone_count\"](this.ptr, fixed_clone_count);\n    }\n    /**\n    * @returns {string}\n    */\n    get_infos() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_infos\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getStringFromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 1);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time_milli() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time_milli\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_delta_time() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_delta_time\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_links() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_links_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_width() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_width\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_height() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_height\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersections() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersections\"](this.ptr);\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersections_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersections_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @returns {number}\n    */\n    get_intersection_size() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersection_size\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} id\n    * @returns {Intersection}\n    */\n    get_intersection(id) {\n        return Intersection.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_intersection\"](this.ptr, id));\n    }\n    /**\n    * @returns {number}\n    */\n    get_trajectories_count() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectories_count\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} id\n    * @returns {Trajectory}\n    */\n    get_trajectory(id) {\n        return Trajectory.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectory\"](this.ptr, id));\n    }\n    /**\n    * @param {number} period\n    * @returns {Float64Array}\n    */\n    get_trajectories_position_at_period(period) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_trajectories_position_at_period\"](retptr, this.ptr, period);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {number}\n    */\n    get_particles_to_disable_indexes_length() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_to_disable_indexes_length\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Float64Array}\n    */\n    get_gravitational_grid(width, height) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_gravitational_grid\"](retptr, this.ptr, width, height);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @param {number} width\n    * @param {number} height\n    * @returns {Float64Array}\n    */\n    get_gravitational_grid_squared_normalized(width, height) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_gravitational_grid_squared_normalized\"](retptr, this.ptr, width, height);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get_links_coordinates_to_draw() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links_coordinates_to_draw\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get_thrusting_links_coordinates_to_draw() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_thrusting_links_coordinates_to_draw\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @param {number} history_length\n    * @param {number} period\n    * @returns {Float64Array}\n    */\n    get_links_states(history_length, period) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_links_states\"](retptr, this.ptr, history_length, period);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get_particles_data_to_draw() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particles_data_to_draw\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @param {Uint32Array} link_indexes\n    * @returns {void}\n    */\n    activate_thrust_for_links(link_indexes) {\n        const ptr0 = passArray32ToWasm(link_indexes);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_activate_thrust_for_links\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @param {Uint32Array} link_indexes\n    * @returns {void}\n    */\n    deactivate_thrust_for_links(link_indexes) {\n        const ptr0 = passArray32ToWasm(link_indexes);\n        const len0 = WASM_VECTOR_LEN;\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_deactivate_thrust_for_links\"](this.ptr, ptr0, len0);\n    }\n    /**\n    * @returns {number}\n    */\n    get_step() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_step\"](this.ptr) >>> 0;\n    }\n    /**\n    * @param {number} particle_index_1\n    * @param {number} particle_index_2\n    * @returns {number | undefined}\n    */\n    get_link_index_from_particles_indexes(particle_index_1, particle_index_2) {\n        const retptr = globalArgumentPtr();\n\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_link_index_from_particles_indexes\"](retptr, this.ptr, particle_index_1, particle_index_2);\n        const present = getUint32Memory()[retptr / 4];\n        const value = getUint32Memory()[retptr / 4 + 1];\n        return present === 0 ? undefined : value;\n\n    }\n    /**\n    * @returns {Float64Array}\n    */\n    get_particle_coordinates() {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_particle_coordinates\"](retptr, this.ptr);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n    /**\n    * @param {number} link_index\n    * @returns {Float64Array}\n    */\n    get_link_coordinates_for_link(link_index) {\n        const retptr = globalArgumentPtr();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"universe_get_link_coordinates_for_link\"](retptr, this.ptr, link_index);\n        const mem = getUint32Memory();\n        const rustptr = mem[retptr / 4];\n        const rustlen = mem[retptr / 4 + 1];\n\n        const realRet = getArrayF64FromWasm(rustptr, rustlen).slice();\n        _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbindgen_free\"](rustptr, rustlen * 8);\n        return realRet;\n\n    }\n}\n\nfunction freeWrapAround(ptr) {\n\n    _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"__wbg_wraparound_free\"](ptr);\n}\n/**\n*/\nclass WrapAround {\n\n    static __wrap(ptr) {\n        const obj = Object.create(WrapAround.prototype);\n        obj.ptr = ptr;\n\n        return obj;\n    }\n\n    free() {\n        const ptr = this.ptr;\n        this.ptr = 0;\n        freeWrapAround(ptr);\n    }\n\n    /**\n    * @param {number} particle_index\n    * @returns {WrapAround}\n    */\n    static new(particle_index) {\n        return WrapAround.__wrap(_gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"wraparound_new\"](particle_index));\n    }\n    /**\n    * @returns {number}\n    */\n    get_particle_index() {\n        return _gravitle_bg__WEBPACK_IMPORTED_MODULE_0__[\"wraparound_get_particle_index\"](this.ptr) >>> 0;\n    }\n}\n\nfunction __wbindgen_object_clone_ref(idx) {\n    return addHeapObject(getObject(idx));\n}\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction __wbindgen_object_drop_ref(i) { dropObject(i); }\n\n\n\n//# sourceURL=webpack:///../pkg/gravitle.js?");

/***/ }),

/***/ "../pkg/gravitle_bg.wasm":
/*!*******************************!*\
  !*** ../pkg/gravitle_bg.wasm ***!
  \*******************************/
/*! exports provided: memory, __wbindgen_global_argument_ptr, __wbg_universe_free, universe_new, universe_load_from_json, universe_tick, universe_reset, universe_set_particles_json, universe_set_links_json, universe_add_particle_json, universe_set_algorithm_from_string, universe_set_collision_behavior_from_string, universe_set_intersection_behavior_from_string, universe_set_link_intersection_behavior_from_string, universe_set_wrap_around_behavior_from_string, universe_set_wrap_around, universe_set_minimal_distance_for_gravity, universe_set_default_link_length, universe_set_default_link_strengh, universe_set_default_link_thrust_force, universe_set_drag_coefficient, universe_set_stabilise_positions_enabled, universe_set_stabiliser_power, universe_set_gravitational_constant, universe_set_default_push_force, universe_set_width, universe_set_height, universe_set_delta_time, universe_set_fixed_clone_count, universe_get_infos, universe_get_delta_time_milli, universe_get_delta_time, universe_get_particles, universe_get_particles_count, universe_get_links, universe_get_links_count, universe_get_width, universe_get_height, universe_get_intersections, universe_get_intersections_count, universe_get_intersection_size, universe_get_intersection, universe_get_trajectories_count, universe_get_trajectory, universe_get_trajectories_position_at_period, universe_get_particles_to_disable_indexes_length, universe_get_gravitational_grid, universe_get_gravitational_grid_squared_normalized, universe_get_links_coordinates_to_draw, universe_get_thrusting_links_coordinates_to_draw, universe_get_links_states, universe_get_particles_data_to_draw, universe_activate_thrust_for_links, universe_deactivate_thrust_for_links, universe_get_step, universe_get_link_index_from_particles_indexes, universe_get_particle_coordinates, universe_get_link_coordinates_for_link, __wbg_intersection_free, intersection_new, intersection_get_intersection_x, intersection_get_intersection_y, intersection_get_link_index, intersection_get_particle_index, __wbg_trajectory_free, __wbg_linkintersection_free, linkintersection_new, linkintersection_get_intersection_x, linkintersection_get_intersection_y, linkintersection_get_link_1_index, linkintersection_get_link_2_index, __wbg_wraparound_free, wraparound_new, wraparound_get_particle_index, __wbg_collision_free, collision_new, collision_get_particle_1_index, collision_get_particle_2_index, __wbg_linktocreate_free, linktocreate_new, linktocreate_get_particle_1_index, linktocreate_get_particle_2_index, __wbindgen_malloc, __wbindgen_realloc, __wbindgen_free */
/***/ (function(module, exports, __webpack_require__) {

eval("\"use strict\";\n// Instantiate WebAssembly module\nvar wasmExports = __webpack_require__.w[module.i];\n__webpack_require__.r(exports);\n// export exports from WebAssembly module\nfor(var name in wasmExports) if(name != \"__webpack_init__\") exports[name] = wasmExports[name];\n// exec imports from WebAssembly module (for esm order)\n/* harmony import */ var m0 = __webpack_require__(/*! ./gravitle */ \"../pkg/gravitle.js\");\n\n\n// exec wasm module\nwasmExports[\"__webpack_init__\"]()\n\n//# sourceURL=webpack:///../pkg/gravitle_bg.wasm?");

/***/ }),

/***/ "./index.js":
/*!******************!*\
  !*** ./index.js ***!
  \******************/
/*! exports provided: start */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return start; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./utils.js\");\n/* harmony import */ var gravitle__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gravitle */ \"../pkg/gravitle.js\");\n/* harmony import */ var _webgl_renderer_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./webgl-renderer.js */ \"./webgl-renderer.js\");\n\n\n\n\nconst get_conf = () => {\n    const conf = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]();\n    conf.width = canvas.width * 0.5;\n    conf.height = canvas.height * 0.5;\n    conf.wrap_around = true;\n    conf.drag_coefficient = 0.01;\n    conf.collision_behavior = 'push-particles';\n    conf.default_link_strengh = 2000.0;\n    conf.default_link_length = 16.0;\n    conf.default_link_thrust_force = 1000.0;\n    const diameter = 2.0;\n    const big_dimameter = 20.0;\n    const big_mass = 20.0;\n    conf.particles = [\n        {x: -30, y: 10, diameter: diameter},\n        {x: -10, y: 10, diameter: diameter},\n        {x: 10, y: 10, diameter: diameter},\n        {x: 30, y: 10, diameter: diameter},\n        {x: -40, y: 0, diameter: diameter},\n        {x: -20, y: 0, diameter: diameter},\n        {x: 0, y: 0, diameter: diameter},\n        {x: 20, y: 0, diameter: diameter},\n        {x: 40, y: 0, diameter: diameter},\n        {x: -10, y: -10, diameter: diameter},\n        {x: 10, y: -10, diameter: diameter},\n        {x: conf.width * 0.2, y: conf.height * 0.2, diameter: big_dimameter, mass: big_mass },\n        {x: conf.width * 0.2, y: -conf.height * 0.2, diameter: big_dimameter, mass: big_mass },\n        {x: -conf.width * 0.2, y: conf.height * 0.2, diameter: big_dimameter, mass: big_mass },\n        {x: -conf.width * 0.2, y: -conf.height * 0.2, diameter: big_dimameter, mass: big_mass }\n    ];\n    conf.links = [\n        {\n            p1_index: 4,\n            p2_index: 5\n        }, {\n            p1_index: 9,\n            p2_index: 10\n        }, {\n            p1_index: 7,\n            p2_index: 8\n        }, {\n            p1_index: 4,\n            p2_index: 0\n        }, {\n            p1_index: 0,\n            p2_index: 5\n        }, {\n            p1_index: 0,\n            p2_index: 1\n        }, {\n            p1_index: 5,\n            p2_index: 9\n        }, {\n            p1_index: 1,\n            p2_index: 6\n        }, {\n            p1_index: 6,\n            p2_index: 2\n        }, {\n            p1_index: 6,\n            p2_index: 7\n        }, {\n            p1_index: 6,\n            p2_index: 10\n        }, {\n            p1_index: 2,\n            p2_index: 3\n        }, {\n            p1_index: 2,\n            p2_index: 7\n        }, {\n            p1_index: 10,\n            p2_index: 7\n        }, {\n            p1_index: 3,\n            p2_index: 7\n        }, {\n            p1_index: 3,\n            p2_index: 8\n        }, {\n            p1_index: 5,\n            p2_index: 1\n        }, {\n            p1_index: 9,\n            p2_index: 6\n        }, {\n            p1_index: 5,\n            p2_index: 6\n        }, {\n            p1_index: 5,\n            p2_index: 6\n        }, {\n            p1_index: 2,\n            p2_index: 1\n        }\n    ];\n    return conf;\n};\n\nconst render_loop = () => {\n    const resolution = 0;\n    const period = 0;\n    const link_states_period = 1;\n    const link_states_history_length = 32;\n    webgl_renderer.render(\n        universe.get_links_coordinates_to_draw(),\n        universe.get_particles_data_to_draw(),\n        [],\n        resolution,\n        universe.get_width(),\n        universe.get_height(),\n        false,\n        false,\n        [],\n        [],\n        false,\n        [],\n        universe.get_links_states(link_states_history_length, link_states_period)\n    );\n    requestAnimationFrame(render_loop);\n}\n\nconst tick = () => {\n    universe.tick();\n};\n\nconst tickMultiple = () => {\n    const now = Date.now();\n    delta = now - time;\n    const resolution = universe.get_delta_time_milli();\n    while (delta > resolution) {\n        delta -= resolution;\n        tick();\n    }\n    time = now - delta;\n};\n\nconst start = () => {\n    time = Date.now();\n    interval = setInterval(tickMultiple, 1);\n    requestAnimationFrame(render_loop);\n    canvas.focus();\n};\n\nconst keyup = (e) => {\n    if (bindings && bindings[e.key]) {\n        universe.deactivate_thrust_for_links(bindings[e.key].link_indexes);\n        hide_popup();\n    } else {\n        // Do nothing\n    }\n};\n\nconst keydown = (e) => {\n    if (bindings && bindings[e.key]) {\n        universe.activate_thrust_for_links(bindings[e.key].link_indexes);\n    } else {\n        // Do nothing\n    }\n};\n\nconst hide_popup = () => {\n    if (document.getElementById('popup')) {\n        document.getElementById('popup').classList.add('faded');\n        setTimeout(()=>{\n            document.getElementById('popup').classList.add('hidden');\n        }, 1500);\n    } else {\n        // Do nothing\n    }\n    \n};\n\nconst touchstart = (e) => {\n    const touches = e.changedTouches;\n    for (let i = 0 ; i < touches.length ; i += 1) {\n        const x = touches[i].clientX;\n        if (x < document.body.scrollWidth / 3.0) {\n            universe.activate_thrust_for_links(bindings['left'].link_indexes);\n        } else if (x < document.body.scrollWidth / 3.0 * 2.0) {\n            universe.activate_thrust_for_links(bindings['center'].link_indexes);\n        } else {\n            universe.activate_thrust_for_links(bindings['right'].link_indexes);\n        }\n    }\n};\n\nconst touchend = (e) => {\n    const touches = e.changedTouches;\n    for (let i = 0 ; i < touches.length ; i += 1) {\n        const x = touches[i].clientX;\n        if (x < document.body.scrollWidth / 3.0) {\n            universe.deactivate_thrust_for_links(bindings['left'].link_indexes);\n        } else if (x < document.body.scrollWidth / 3.0 * 2.0) {\n            universe.deactivate_thrust_for_links(bindings['center'].link_indexes);\n        } else {\n            universe.deactivate_thrust_for_links(bindings['right'].link_indexes);\n        }\n        hide_popup();\n    }\n};\n\nconst get_bindings = () => {\n    return {\n        'left' : {\n            link_indexes : [0]\n        },\n        'center' : {\n            link_indexes : [1]\n        },\n        'right' : {\n            link_indexes : [2]\n        },\n        'ArrowLeft' : {\n            link_indexes : [0]\n        },\n        'ArrowUp' : {\n            link_indexes : [1]\n        },\n        'ArrowRight' : {\n            link_indexes : [2]\n        },\n        'ArrowDown' : {\n            link_indexes : [20]\n        },\n        'a' : {\n            link_indexes : [0]\n        },\n        'z' : {\n            link_indexes : [1]\n        },\n        'e' : {\n            link_indexes : [2]\n        },\n        'q' : {\n            link_indexes : [0]\n        },\n        'w' : {\n            link_indexes : [1]\n        },\n        'e' : {\n            link_indexes : [2]\n        },\n        '1' : {\n            link_indexes : [0]\n        },\n        '2' : {\n            link_indexes : [1]\n        },\n        '3' : {\n            link_indexes : [2]\n        },\n        '4' : {\n            link_indexes : [2]\n        },\n        '5' : {\n            link_indexes : [1]\n        },\n        '6' : {\n            link_indexes : [0]\n        }\n    };\n};\n\ndocument.addEventListener('keyup', keyup);\ndocument.addEventListener('keydown', keydown);\n\ndocument.body.addEventListener('touchstart', touchstart);\ndocument.body.addEventListener('touchend', touchend);\n\n//\n// Setup\n//\nconst canvas = document.getElementById('canvas');\ncanvas.height = canvas.clientHeight;\ncanvas.width = canvas.clientWidth;\nlet context;\nconst webgl_context = canvas.getContext('webgl2');\nlet webgl_renderer;\nif (webgl_context) {\n    webgl_renderer = new _webgl_renderer_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"](webgl_context);\n} else {\n    context = canvas.getContext('2d');\n}\nconst universe = gravitle__WEBPACK_IMPORTED_MODULE_1__[\"Universe\"].new();\nuniverse.load_from_json(JSON.stringify(get_conf()));\nconst bindings = get_bindings();\nlet interval = null;\nlet time = null;\nlet delta = null;\nlet last = null;\nlet mouse_positions = null;\nconst frame_gaps = [];\nconst frame_lengths = [];\nlet last_now = null;\nlet average_fps = 0.0;\nlet average_frame_length = 0.0;\n\n\n\n\n//# sourceURL=webpack:///./index.js?");

/***/ }),

/***/ "./main.js":
/*!*****************!*\
  !*** ./main.js ***!
  \*****************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _index_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./index.js */ \"./index.js\");\n/* harmony import */ var _playground_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./playground.js */ \"./playground.js\");\n\n\n\nconst url = new URL(window.location.href);\n\nif (url.pathname.includes('index.html')) {\n    _index_js__WEBPACK_IMPORTED_MODULE_0__[\"start\"]();\n} else if (url.pathname.includes('playground.html')) {\n    _playground_js__WEBPACK_IMPORTED_MODULE_1__[\"start\"]();\n} else {\n    _index_js__WEBPACK_IMPORTED_MODULE_0__[\"start\"]();\n}\n\n\n//# sourceURL=webpack:///./main.js?");

/***/ }),

/***/ "./playground.js":
/*!***********************!*\
  !*** ./playground.js ***!
  \***********************/
/*! exports provided: start */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"start\", function() { return start; });\n/* harmony import */ var gravitle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! gravitle */ \"../pkg/gravitle.js\");\n/* harmony import */ var gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! gravitle/gravitle_bg */ \"../pkg/gravitle_bg.wasm\");\n/* harmony import */ var _render_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./render.js */ \"./render.js\");\n/* harmony import */ var _tests_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./tests.js */ \"./tests.js\");\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./utils.js */ \"./utils.js\");\n/* harmony import */ var _webgl_renderer_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./webgl-renderer.js */ \"./webgl-renderer.js\");\n\n\n\n\n\n\n\nconst start = () => {\n    const fps_infos = document.getElementById('fps-infos');\n    const infos = document.getElementById('infos');\n    const reloadButton = document.getElementById('button-reload');\n    const stepButton = document.getElementById('button-step');\n    const runButton = document.getElementById('button-start');\n    const stopButton = document.getElementById('button-stop');\n    const randomizeButton = document.getElementById('button-randomize');\n    const symetryButton = document.getElementById('button-symetry');\n    const jsonTextarea = document.getElementById('json');\n    const inputCount = document.getElementById('input-count');\n    const inputWidth = document.getElementById('input-width');\n    const inputHeight = document.getElementById('input-height');\n    const inputDeltaTime = document.getElementById('input-delta-time');\n    const inputG = document.getElementById('input-g');\n    const selectAlgorithm = document.getElementById('select-algorithm');\n    const selectCollisionBehavior = document.getElementById('select-collision-behavior');\n    const selectIntersectionBehavior = document.getElementById('select-intersection-behavior');\n    const selectLinkIntersectionBehavior = document.getElementById('select-link-intersection-behavior');\n    const selectWrapAround = document.getElementById('select-wrap-around');\n    const selectFixedCloneCount = document.getElementById('select-fixed-clone-count');\n    const selectStabilisePositionsEnabled = document.getElementById('select-stabilise-positions-enabled');\n    const selectWrapAroundBehavior = document.getElementById('select-wrap-around-behavior');\n    const inputMinimalDistanceForGravity = document.getElementById('input-minimal-distance-for-gravity');\n    const inputDefaultLinkLength = document.getElementById('input-default-link-length');\n    const inputDefaultLinkStrengh = document.getElementById('input-default-link-strengh');\n    const inputDragCoefficient = document.getElementById('input-drag-coefficient');\n    const inputStabilisePower = document.getElementById('input-stabiliser-power');\n    const selectTest = document.getElementById('select-test');\n    const buttonRunTest = document.getElementById('button-run-test');\n    const testDescription = document.getElementById('test-description');\n\n    const inputTrajectoriesPeriod = document.getElementById('input-trajectories-period');\n    const buttonTrajectoriesOn = document.getElementById('button-trajectories-on');\n    const buttonTrajectoriesOff = document.getElementById('button-trajectories-off');\n\n    const inputGravitationalFieldResolution = document.getElementById('input-gravitational-field-resolution');\n    const buttonGravitationalFieldOn = document.getElementById('button-gravitational-field-on');\n    const buttonGravitationalFieldOff = document.getElementById('button-gravitational-field-off');\n    const testsDiv = document.getElementById('tests');\n\n    const canvas = document.getElementById('canvas');\n    canvas.height = 1000;\n    canvas.width = 1000;\n    let context;\n    const webgl_context = canvas.getContext(\"webgl2\");\n    let webgl_renderer;\n    if (webgl_context) {\n        webgl_renderer = new _webgl_renderer_js__WEBPACK_IMPORTED_MODULE_5__[\"default\"](webgl_context);\n    } else {\n        context = canvas.getContext(\"2d\");\n    }\n\n    let bindings = {};\n    const LOAD_BINDINGS_FOR_SPACESHIP_STEP = 200;\n    const MIN_DELTA_X_FOR_SPACESHIP_LINK = 2.0;\n\n    let MODE = null;\n    let SHOW_TRAJECTORIES = null;\n    let SHOW_GRAVITATIONAL_FIELD = null;\n\n    const BASE_CONF = _utils_js__WEBPACK_IMPORTED_MODULE_4__[\"get_base_conf_copy\"]();\n    const tests = _tests_js__WEBPACK_IMPORTED_MODULE_3__[\"get_tests\"]();\n    tests.forEach(test => {\n        const a = document.createElement('a');\n        const linkText = document.createTextNode(test.title);\n        a.appendChild(linkText);\n        a.title = test.title;\n        a.href = `?test=${test.id}`;\n        testsDiv.appendChild(a);\n        a.addEventListener('click', (event) => {\n            const url = new URL(event.target.href);\n            const test_id = url.searchParams.get('test');\n            runTest(test_id);\n            event.preventDefault();\n            window.history.pushState({}, document.title, event.target.href);\n        });\n    });\n\n    let space_croquet_links = null;\n\n    const universe = gravitle__WEBPACK_IMPORTED_MODULE_0__[\"Universe\"].new();\n    universe.load_from_json(JSON.stringify(BASE_CONF));\n    const launchers = [];\n\n    let interval = null;\n    let time = null;\n    let delta = null;\n    let last = null;\n    let mouse_positions = null;\n    const frame_gaps = [];\n    const frame_lengths = [];\n    let last_now = null;\n    let average_fps = 0.0;\n    let average_frame_length = 0.0;\n\n    randomizeButton.addEventListener('click', () => {\n        randomize();\n    });\n\n    symetryButton.addEventListener('click', () => {\n        symetry();\n    });\n\n    reloadButton.addEventListener('click', () => {\n        reloadFromJSON();\n    });\n\n    stepButton.addEventListener('click', () => {\n        tick();\n    });\n\n    runButton.addEventListener('click', () => {\n        run();\n    });\n\n    stopButton.addEventListener('click', () => {\n        stop();\n    });\n\n    buttonTrajectoriesOn.addEventListener('click', () => {\n        trajectoriesOn();\n    });\n\n    buttonTrajectoriesOff.addEventListener('click', () => {\n        trajectoriesOff();\n    });\n\n    buttonGravitationalFieldOn.addEventListener('click', () => {\n        gravitationalFieldOn();\n    });\n\n    buttonGravitationalFieldOff.addEventListener('click', () => {\n        gravitationalFieldOff();\n    });\n\n    selectAlgorithm.addEventListener('change', () => {\n        updateConf();\n    });\n\n    selectCollisionBehavior.addEventListener('change', () => {\n        updateConf();\n    });\n\n    selectIntersectionBehavior.addEventListener('change', () => {\n        updateConf();\n    });\n\n    selectLinkIntersectionBehavior.addEventListener('change', () => {\n        updateConf();\n    });\n\n    selectWrapAround.addEventListener('change', () => {\n        updateConf();\n    });\n\n    selectFixedCloneCount.addEventListener('change', () => {\n        updateConf();\n    });\n\n    selectWrapAroundBehavior.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputG.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputWidth.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputHeight.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputDeltaTime.addEventListener('change', () => {\n        updateConf();\n    });\n\n    selectStabilisePositionsEnabled.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputMinimalDistanceForGravity.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputDefaultLinkLength.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputDefaultLinkStrengh.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputDragCoefficient.addEventListener('change', () => {\n        updateConf();\n    });\n\n    inputStabilisePower.addEventListener('change', () => {\n        updateConf();\n    });\n\n    canvas.addEventListener('mousedown', (event) => {\n        mouse_positions = {};\n        mouse_positions.down = getMousePos(canvas, event);\n        mouse_positions.up = mouse_positions.down;\n    });\n\n    canvas.addEventListener('mousemove', (event) => {\n        if (mouse_positions) {\n            mouse_positions.up = getMousePos(canvas, event);\n        } else {\n            // Do nothing\n        }\n    });\n\n    canvas.addEventListener('mouseup', (event) => {\n        mouse_positions.up = getMousePos(canvas, event);\n        launchParticle(mouse_positions);\n        mouse_positions = null;\n    });\n\n    const keyup = (e) => {\n        if (bindings && bindings[e.key]) {\n            universe.deactivate_thrust_for_links(bindings[e.key].link_indexes);\n        } else {\n            // Do nothing\n        }\n    };\n\n    const keydown = (e) => {\n        if (bindings && bindings[e.key]) {\n            universe.activate_thrust_for_links(bindings[e.key].link_indexes);\n        } else {\n            // Do nothing\n        }\n    };\n\n    const updateConf = () => {\n        const conf = getParameterizedConf(JSON.parse(jsonTextarea.value));\n        universe.set_algorithm_from_string(conf.algorithm);\n        universe.set_gravitational_constant(conf.gravitational_constant);\n        universe.set_width(conf.width);\n        universe.set_height(conf.height);\n        universe.set_delta_time(conf.delta_time);\n        universe.set_collision_behavior_from_string(conf.collision_behavior);\n        universe.set_intersection_behavior_from_string(conf.intersection_behavior);\n        universe.set_link_intersection_behavior_from_string(conf.link_intersection_behavior);\n        universe.set_wrap_around(conf.wrap_around);\n        universe.set_fixed_clone_count(conf.fixed_clone_count);\n        universe.set_stabilise_positions_enabled(conf.stabilise_positions_enabled);\n        universe.set_minimal_distance_for_gravity(conf.minimal_distance_for_gravity);\n        universe.set_default_link_length(conf.default_link_length);\n        universe.set_default_link_strengh(conf.default_link_strengh);\n        universe.set_drag_coefficient(conf.drag_coefficient);\n        universe.set_stabiliser_power(conf.stabiliser_power);\n        universe.set_wrap_around_behavior_from_string(conf.wrap_around_behavior);\n        jsonTextarea.value = JSON.stringify(conf, null, 4);\n    }\n\n    const getParameterizedConf = (conf) => {\n        conf.algorithm = selectAlgorithm.options[selectAlgorithm.selectedIndex].value;\n        conf.gravitational_constant = parseFloat(inputG.value);\n        conf.width = parseFloat(inputWidth.value);\n        conf.height = parseFloat(inputHeight.value);\n        conf.delta_time = parseFloat(inputDeltaTime.value);\n        conf.collision_behavior = selectCollisionBehavior.options[selectCollisionBehavior.selectedIndex].value;\n        conf.intersection_behavior = selectIntersectionBehavior.options[selectIntersectionBehavior.selectedIndex].value;\n        conf.link_intersection_behavior = selectLinkIntersectionBehavior.options[selectLinkIntersectionBehavior.selectedIndex].value;\n        conf.wrap_around = selectWrapAround.options[selectWrapAround.selectedIndex].value === 'true';\n        conf.fixed_clone_count = selectFixedCloneCount.options[selectFixedCloneCount.selectedIndex].value === 'true';\n        conf.stabilise_positions_enabled =\n            selectStabilisePositionsEnabled.options[selectStabilisePositionsEnabled.selectedIndex].value === 'true';\n        conf.minimal_distance_for_gravity = parseFloat(inputMinimalDistanceForGravity.value);\n        conf.default_link_length = parseFloat(inputDefaultLinkLength.value);\n        conf.default_link_strengh = parseFloat(inputDefaultLinkStrengh.value);\n        conf.drag_coefficient = parseFloat(inputDragCoefficient.value);\n        conf.stabiliser_power = parseInt(inputStabilisePower.value);\n        conf.wrap_around_behavior = selectWrapAroundBehavior.options[selectWrapAroundBehavior.selectedIndex].value;\n        return conf;\n    }\n\n    const reloadFromJSON = () => {\n        // Reload parameters values fro json\n        const parsedJson = JSON.parse(jsonTextarea.value);\n        selectAlgorithm.value = parsedJson.algorithm;\n        inputWidth.value = parsedJson.width;\n        inputHeight.value = parsedJson.height;\n        inputDeltaTime.value = parsedJson.delta_time;\n        inputG.value = parsedJson.gravitational_constant;\n        selectCollisionBehavior.value = parsedJson.collision_behavior;\n        selectIntersectionBehavior.value = parsedJson.intersection_behavior;\n        selectLinkIntersectionBehavior.value = parsedJson.link_intersection_behavior;\n        selectWrapAround.value = parsedJson.wrap_around;\n        selectFixedCloneCount.value = parsedJson.fixed_clone_count;\n        selectStabilisePositionsEnabled.value = parsedJson.stabilise_positions_enabled;\n        inputMinimalDistanceForGravity.value = parsedJson.minimal_distance_for_gravity;\n        inputDefaultLinkLength.value = parsedJson.default_link_length;\n        inputDefaultLinkStrengh.value = parsedJson.default_link_strengh;\n        inputDragCoefficient.value = parsedJson.drag_coefficient;\n        inputStabilisePower.value = parsedJson.stabiliser_power;\n        selectWrapAroundBehavior.value = parsedJson.wrap_around_behavior;\n        // Reload universe\n        stop();\n        universe.reset();\n        launchers.length = 0;\n        interval = null;\n        time = null;\n        delta = null;\n        universe.load_from_json(jsonTextarea.value);\n        run();\n    };\n\n    const renderLoop = () => {\n        // Setup analytics\n        const start_timestamp = Date.now();\n        // Render\n        fps_infos.textContent = `FPS : ${average_fps.toFixed(0)}\\n`\n            + `Frame : ${average_frame_length.toFixed(2)} ms`;\n        infos.textContent = universe.get_infos();\n        const resolution = parseInt(inputGravitationalFieldResolution.value);\n        const period = parseInt(inputTrajectoriesPeriod.value);\n        const link_states_period = 1;\n        const link_states_history_length = 32;\n        if (webgl_renderer) {\n            webgl_renderer.render(\n                universe.get_links_coordinates_to_draw(),\n                universe.get_particles_data_to_draw(),\n                SHOW_GRAVITATIONAL_FIELD && resolution ? universe.get_gravitational_grid_squared_normalized(resolution, resolution) : [],\n                resolution,\n                universe.get_width(),\n                universe.get_height(),\n                SHOW_GRAVITATIONAL_FIELD,\n                SHOW_TRAJECTORIES,\n                SHOW_TRAJECTORIES && period ? universe.get_trajectories_position_at_period(period) : [],\n                launchers_data(launchers),\n                MODE === 'SPACE-CROQUET',\n                current_launcher_data(mouse_positions),\n                universe.get_links_states(link_states_history_length, link_states_period)\n            );\n        } else {\n            _render_js__WEBPACK_IMPORTED_MODULE_2__[\"draw\"](\n                context,\n                parseInt(inputGravitationalFieldResolution.value),\n                SHOW_GRAVITATIONAL_FIELD,\n                MODE,\n                parseInt(inputTrajectoriesPeriod.value),\n                SHOW_TRAJECTORIES,\n                universe,\n                gravitle_gravitle_bg__WEBPACK_IMPORTED_MODULE_1__[\"memory\"],\n                mouse_positions,\n                launchers\n            );\n        }\n        requestAnimationFrame(renderLoop);\n        // Update analytics\n        updateFps();\n        updateFrameLength(start_timestamp);\n    }\n\n    const current_launcher_data = (mouse_positions) => {\n        let data = [];\n        if (mouse_positions) {\n            const p1 = get_position_from_canvas_to_universe(mouse_positions.down);\n            const p2 = get_position_from_canvas_to_universe(mouse_positions.up);\n            data.push(...[\n                p1.x,\n                p1.y,\n                p2.x,\n                p2.y\n            ]);\n        } else {\n            // Do nothing\n        }\n        return data;\n    };\n\n    const get_position_from_canvas_to_universe = (point) => {\n        const universe_width = universe.get_width();\n        const universe_height = universe.get_height();\n        const unit_x = canvas.width / universe_width;\n        const unit_y = canvas.height / universe_height;\n        return {\n            x: point.x / unit_x - universe_width * 0.5,\n            y: - point.y / unit_y + universe_height * 0.5\n        };\n    };\n\n    const launchers_data = (launchers) => {\n        let data = [];\n        for(let i = 0, l = launchers.length, c = 1 ; i < l ; i += c) {\n            const p1 = get_position_from_canvas_to_universe(launchers[i].down);\n            const p2 = get_position_from_canvas_to_universe(launchers[i].up);\n            data.push(...[\n                p1.x,\n                p1.y,\n                p2.x,\n                p2.y\n            ]);\n        }\n        return data;\n    };\n\n    const updateFrameLength = (start_timestamp) => {\n        const frame_length = Date.now() - start_timestamp;\n        frame_lengths.push(frame_length);\n        while(frame_lengths.length > 100) {\n            frame_lengths.shift();\n        }\n        let frame_lengths_sum = 0.0;\n        const count = frame_lengths.length;\n        for (let i = 0 ; i < count ; i += 1) {\n            frame_lengths_sum += frame_lengths[i];\n        }\n        average_frame_length = frame_lengths_sum / count;\n    };\n\n    const updateFps = () => {\n        const gap = Date.now() - last_now;\n        last_now = Date.now();\n        frame_gaps.push(gap);\n        while(frame_gaps.length > 100) {\n            frame_gaps.shift();\n        }\n        let gaps_sum = 0.0;\n        const count = frame_gaps.length;\n        for (let i = 0 ; i < count ; i+=1) {\n            gaps_sum += frame_gaps[i];\n        }\n        average_fps = 1.0 / (gaps_sum / count / 1000.0);\n    };\n\n    const trajectoriesOn = () => {\n        buttonTrajectoriesOn.disabled = true;\n        buttonTrajectoriesOff.disabled = false;\n        SHOW_TRAJECTORIES = true;\n    }\n\n    const trajectoriesOff = () => {\n        buttonTrajectoriesOn.disabled = false;\n        buttonTrajectoriesOff.disabled = true;\n        SHOW_TRAJECTORIES = false;\n    }\n\n    const gravitationalFieldOn = () => {\n        buttonGravitationalFieldOn.disabled = true;\n        buttonGravitationalFieldOff.disabled = false;\n        SHOW_GRAVITATIONAL_FIELD = true;\n    }\n\n    const gravitationalFieldOff = () => {\n        buttonGravitationalFieldOn.disabled = false;\n        buttonGravitationalFieldOff.disabled = true;\n        SHOW_GRAVITATIONAL_FIELD = false;\n    }\n\n    const run = () => {\n        time = Date.now();\n        interval = setInterval(tickMultiple, 1);\n        runButton.disabled = true;\n        stopButton.disabled = false;\n    };\n\n    const stop = () => {\n        if(interval) {\n            clearInterval(interval);\n        } else {\n            // NTD\n        }\n        runButton.disabled = false;\n        stopButton.disabled = true;\n    };\n\n    const tick = () => {\n        universe.tick();\n        if (universe.get_particles_to_disable_indexes_length() && MODE === 'SPACE-CROQUET') {\n            universe.set_links_json(JSON.stringify(space_croquet_links));\n        } else if (MODE === 'SPACE-SHIP') {\n            if (universe.get_step() === LOAD_BINDINGS_FOR_SPACESHIP_STEP) {\n                loadBindingsForSpaceship();\n            } else {\n                // Do nothing\n            }\n        } else {\n            // Do nothing\n        }\n    };\n\n    const tickMultiple = () => {\n        const now = Date.now();\n        delta = now - time;\n        const resolution = universe.get_delta_time_milli();\n        while (delta > resolution) {\n            delta -= resolution;\n            tick();\n        }\n        time = now - delta;\n    };\n\n    const runTest = (testId) => {\n        const test = _tests_js__WEBPACK_IMPORTED_MODULE_3__[\"get_test_by_id\"](testId);\n        if (test.mode === 'SPACE-CROQUET') {\n            space_croquet_links = test.conf.links;\n        } else {\n            space_croquet_links = [];\n        }\n        MODE = test.mode ? test.mode : test.id;\n        bindings = test.bindings;\n        jsonTextarea.value = JSON.stringify(test.conf, null, 4);\n        testDescription.innerHTML = test.description;\n        reloadFromJSON();\n    }\n\n    const randomize = () => {\n        MODE = 'RANDOM';\n        const conf = getParameterizedConf(JSON.parse(jsonTextarea.value));\n        const particles = [];\n        for (let i = 0 ; i < parseFloat(inputCount.value) ; i += 1) {\n            const x = _utils_js__WEBPACK_IMPORTED_MODULE_4__[\"get_random_number\"](- conf.width / 5, conf.width / 5);\n            const y = _utils_js__WEBPACK_IMPORTED_MODULE_4__[\"get_random_number\"](- conf.height / 5, conf.height / 5);\n            const mass = _utils_js__WEBPACK_IMPORTED_MODULE_4__[\"get_random_number\"](0.5, 5.0);\n            const fixed = false;\n            const diameter = mass;\n            particles.push({\n                x: x,\n                y: y,\n                mass: mass,\n                fixed: fixed,\n                diameter: diameter\n            });\n        }\n        conf.particles = particles;\n        conf.links = [];\n        jsonTextarea.value = JSON.stringify(conf, null, 4);\n        reloadFromJSON();\n    }\n\n    const symetry = () => {\n        MODE = 'SYMETRY';\n        const conf = getParameterizedConf(JSON.parse(jsonTextarea.value));\n        const particles = [];\n        for (let i = 0 ; i < parseFloat(inputCount.value) ; i += 2) {\n            const x = _utils_js__WEBPACK_IMPORTED_MODULE_4__[\"get_random_number\"](- conf.width / 5, conf.width / 5);\n            const y = _utils_js__WEBPACK_IMPORTED_MODULE_4__[\"get_random_number\"](- conf.height / 5, conf.height / 5);\n            const mass = _utils_js__WEBPACK_IMPORTED_MODULE_4__[\"get_random_number\"](0.5, 5.0);\n            const fixed = false;\n            const diameter = mass;\n            particles.push({\n                x: x,\n                y: y,\n                mass: mass,\n                fixed: fixed,\n                diameter: diameter\n            });\n            particles.push({\n                x: -x,\n                y: y,\n                mass: mass,\n                fixed: fixed,\n                diameter: diameter\n            });\n        }\n        conf.particles = particles;\n        conf.links = [];\n        jsonTextarea.value = JSON.stringify(conf, null, 4);\n        reloadFromJSON();\n    }\n\n    const jsonCopy = (object) => {\n        return JSON.parse(JSON.stringify(object));\n    }\n\n    const getIndex = (row, column) => {\n        return row * width + column;\n    };\n\n    const getMousePos = (canvas, event) => {\n        const rect = canvas.getBoundingClientRect(); // abs. size of element\n        const scaleX = canvas.width / rect.width;   // relationship bitmap vs. element for X\n        const scaleY = canvas.height / rect.height;  // relationship bitmap vs. element for Y\n        return {\n            x: (event.clientX - rect.left) * scaleX,   // scale mouse coordinates after they have\n            y: (event.clientY - rect.top) * scaleY     // been adjusted to be relative to element\n        }\n    }\n\n    const getPositionFromCanvasToUniverse = (position_in_canvas) => {\n        const universeWidth = universe.get_width();\n        const universeHeight = universe.get_height();\n        return {\n            x: position_in_canvas.x / canvas.width * universeWidth - universeWidth * 0.5,\n            y: - (position_in_canvas.y / canvas.height * universeHeight - universeHeight * 0.5)\n        }\n    }\n\n    const launchParticle = (mouse_position) => {\n        const position_in_universe = getPositionFromCanvasToUniverse(mouse_positions.down);\n        const position_in_universe_old = getPositionFromCanvasToUniverse(mouse_positions.up);\n        const dx = position_in_universe_old.x - position_in_universe.x;\n        const dy = position_in_universe_old.y - position_in_universe.y;\n        const sensibility = 0.01;\n        let collision_behavior = 'do-nothing';\n        if (MODE === 'SPACE-CROQUET') {\n            collision_behavior = 'disable-self';\n        } else {\n            // Do nothing\n        }\n        universe.add_particle_json(JSON.stringify(\n            {\n                x: position_in_universe.x,\n                y: position_in_universe.y,\n                old_x: position_in_universe.x + dx * sensibility,\n                old_y: position_in_universe.y + dy * sensibility,\n                collision_behavior: collision_behavior\n            }\n        ));\n        launchers.push(mouse_position);\n        if (MODE === 'SPACE-CROQUET') {\n            universe.set_links_json(JSON.stringify(space_croquet_links));\n        } else {\n            // Do nothing\n        }\n    }\n\n    const loadBindingsForSpaceship = () => {\n        const coordinates = universe.get_particle_coordinates();\n        const ids_and_squared_lengths = [];\n        for (let i = 0, l = coordinates.length, s = 2 ; i < l ; i += s) {\n            const id = i / s;\n            const x = coordinates[i + 0];\n            const y = coordinates[i + 1];\n            if (y < -1.0 && Math.abs(x) > 0.5) {\n                ids_and_squared_lengths.push({\n                    id: id,\n                    length_squared: x*x + y*y\n                });\n            } else {\n                // Do nothing\n            }\n        }\n        ids_and_squared_lengths.sort((a,b) => {\n            if ( a.length_squared < b.length_squared ) {\n                return -1;\n            } else if ( a.length_squared > b.length_squared ){\n                return 1;\n            } else {\n                return 0;\n            }\n        });\n        bindings = {};\n        for (let i = 0, l = ids_and_squared_lengths.length-1, s = 2 ; i < l ; i += s) {\n            for (let j = 0 ; j < l ; j += s) {\n                if (i != j) {\n                    const link_index_1 = universe.get_link_index_from_particles_indexes(\n                        ids_and_squared_lengths[i+0].id, ids_and_squared_lengths[j+0].id);\n                    const link_index_2 = universe.get_link_index_from_particles_indexes(\n                        ids_and_squared_lengths[i+1].id, ids_and_squared_lengths[j+1].id);\n                    let link1_coordinates = universe.get_link_coordinates_for_link(link_index_1);\n                    let dx = Math.abs(link1_coordinates[0] - link1_coordinates[2])\n                    if (link_index_1 && link_index_2 && dx > MIN_DELTA_X_FOR_SPACESHIP_LINK) {\n                        bindings = {\n                            'a' : {\n                                link_indexes : [link_index_2]\n                            },\n                            'z' : {\n                                link_indexes : [link_index_1]\n                            },\n                            'q' : {\n                                link_indexes : [link_index_2]\n                            },\n                            'w' : {\n                                link_indexes : [link_index_1]\n                            }\n                        };\n                        break;\n                    } else {\n                        // Do nothing\n                    }\n                } else {\n                    // Do nothing\n                }\n            }\n        }\n        console.log(bindings);\n    }\n\n    const default_test_id = _tests_js__WEBPACK_IMPORTED_MODULE_3__[\"get_default_test\"]();\n    document.addEventListener('keyup', keyup);\n    document.addEventListener('keydown', keydown);\n    trajectoriesOff();\n    gravitationalFieldOff();\n    runTest(default_test_id);\n    last_now = Date.now();\n    requestAnimationFrame(renderLoop);\n    const url = new URL(window.location.href);\n    const param_test = url.searchParams.get('test');\n    const test_id = param_test ? param_test : default_test_id;\n    runTest(test_id);\n    canvas.focus();\n};\n\n\n\n\n//# sourceURL=webpack:///./playground.js?");

/***/ }),

/***/ "./render.js":
/*!*******************!*\
  !*** ./render.js ***!
  \*******************/
/*! exports provided: draw */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"draw\", function() { return draw; });\nconst draw = (\n        context,\n        gravitational_field_resolution,\n        SHOW_GRAVITATIONAL_FIELD,\n        MODE,\n        period,\n        SHOW_TRAJECTORIES,\n        universe,\n        memory,\n        mouse_positions,\n        launchers\n) => {\n    context.clearRect(0, 0, canvas.width, canvas.height);\n    if (SHOW_GRAVITATIONAL_FIELD === true && gravitational_field_resolution > 0) {\n        drawGravitationalGrid(universe, context, gravitational_field_resolution);\n    } else {\n        // Do nothing\n    }\n    if (MODE === 'SPACE-CROQUET') {\n        drawLaunchers(context, launchers);\n    } else {\n        // Do nothing\n    }\n    if (SHOW_TRAJECTORIES === true && period > 0) {\n        drawTrajectories(universe, context, period);\n    } else {\n        // Do nothing\n    }\n    drawSegments(universe, context, memory);\n    drawParticles(universe, context, memory);\n    drawMouseInteraction(universe, context, mouse_positions);\n};\n\nconst drawGravitationalGrid = (universe, context, resolution) => {\n    const width = resolution;\n    const height = resolution;\n    const grid = universe.get_gravitational_grid(width, height);\n    let max = -Infinity;\n    let min = Infinity;\n    for (let i = 0, l = grid.length ; i < l ; i++) {\n        grid[i] = Math.sqrt(grid[i]);\n        if (grid[i] < min) {\n            min = grid[i];\n        } else {\n            // Do nothing\n        }\n        if (grid[i] > max) {\n            max = grid[i];\n        } else {\n            // Do nothing\n        }\n    }\n    for (let i = 0 ; i < width ; i += 1) {\n        for (let j = 0 ; j < height ; j += 1) {\n            const value = (grid[i * width + j] - min) / (max-min) * 255;\n            context.fillStyle = `rgba(${value*.9}, ${value*.9}, ${value}, 1)`;\n            context.fillRect(i * canvas.width / width,\n                (height-1-j) * canvas.height / height,\n                canvas.width / width,\n                canvas.height / height\n            );\n        }\n    }\n};\n\nconst drawLaunchers = (context, launchers) => {\n    context.strokeStyle = \"#888\";\n    context.lineWidth = 2;\n    for (let i = 0 ; i < launchers.length ; i += 1 ) {\n        context.beginPath();\n        context.moveTo(launchers[i].up.x, launchers[i].up.y);\n        context.lineTo(launchers[i].down.x, launchers[i].down.y);\n        context.stroke();\n    }\n};\n\nconst drawTrajectories = (universe, context, period) => {\n    const trajectories = universe.get_trajectories_position_at_period(period);\n    context.strokeStyle = \"#888\";\n    context.lineWidth = 1;\n    const diameter = 1;\n    for (let i = 0 ; i < trajectories.length ; i += 2) {\n        const p = getPositionFromUniverseToCanvas(universe, {\n            x: trajectories[i + 0],\n            y: trajectories[i + 1]\n        });\n        context.beginPath();\n        context.arc(\n            p.x,\n            p.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n    }\n}\n\nconst drawSegments = (universe, context, memory) => {\n    context.strokeStyle = '#eee';\n    context.lineWidth = 2;\n    const link_coordinates = universe.get_links_coordinates_to_draw();\n    for (let i = 0, l = link_coordinates.length ; i < l ; i += 4 ) {\n        const p1 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates[i + 0],\n            y: link_coordinates[i + 1]\n        });\n        const p2 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates[i + 2],\n            y: link_coordinates[i + 3]\n        });\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.stroke();\n    }\n    context.strokeStyle = '#88f';\n    context.lineWidth = 8;\n    const link_coordinates_thrusting = universe.get_thrusting_links_coordinates_to_draw();\n    for (let i = 0, l = link_coordinates_thrusting.length ; i < l ; i += 4 ) {\n        const p1 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates_thrusting[i + 0],\n            y: link_coordinates_thrusting[i + 1]\n        });\n        const p2 = getPositionFromUniverseToCanvas(universe, {\n            x: link_coordinates_thrusting[i + 2],\n            y: link_coordinates_thrusting[i + 3]\n        });\n        context.beginPath();\n        context.moveTo(p1.x, p1.y);\n        context.lineTo(p2.x, p2.y);\n        context.stroke();\n    }\n};\n\nconst drawParticles = (universe, context, memory) => {\n    const particlesPointer = universe.get_particles();\n    const particlesCount = universe.get_particles_count();\n    const PARTICLE_SIZE = 14;\n    const particles = new Float64Array(memory.buffer, particlesPointer, particlesCount * PARTICLE_SIZE);\n    const unitX = canvas.width / universe.get_width();\n    const unitY = canvas.height / universe.get_height();\n    context.strokeStyle = \"#FFF\";\n    context.lineWidth = 2;\n    for (let i = 0 ; i < particles.length ; i+= PARTICLE_SIZE ) {\n        const position = getPositionFromUniverseToCanvas(universe, {\n            x: particles[i + 0],\n            y: particles[i + 1]\n        });\n        const diameter = (unitX * 0.5) * particles[i + 2];\n        context.beginPath();\n        context.arc(\n            position.x,\n            position.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n    }\n};\n\nconst drawMouseInteraction = (universe, context, mouse_positions) => {\n    if (mouse_positions) {\n        // Position\n        const unitX = canvas.width / universe.get_width();\n        const diameter = (unitX * 0.5);\n        context.strokeStyle = \"#eef\";\n        context.lineWidth = 2;\n        context.beginPath();\n        context.arc(\n            mouse_positions.down.x,\n            mouse_positions.down.y,\n            diameter,\n            0,\n            2 * Math.PI\n        );\n        context.stroke();\n        // Line\n        context.strokeStyle = \"#ddf\";\n        context.beginPath();\n        context.moveTo(mouse_positions.down.x, mouse_positions.down.y);\n        context.lineTo(mouse_positions.up.x, mouse_positions.up.y);\n        context.stroke();\n    } else {\n        // Do nothing\n    }\n}\n\nconst getPositionFromUniverseToCanvas = (universe, position_in_universe) => {\n    const universeWidth = universe.get_width();\n    const universeHeight = universe.get_height();\n    const unitX = canvas.width / universeWidth;\n    const unitY = canvas.height / universeHeight;\n    return {\n        x: (universeWidth * 0.5) * unitX + position_in_universe.x * unitX,\n        y: (universeHeight * 0.5) * unitY - position_in_universe.y * unitY\n    }\n}\n\n\n\n\n//# sourceURL=webpack:///./render.js?");

/***/ }),

/***/ "./tests.js":
/*!******************!*\
  !*** ./tests.js ***!
  \******************/
/*! exports provided: get_test_by_id, get_tests, get_default_test */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_test_by_id\", function() { return get_test_by_id; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_tests\", function() { return get_tests; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_default_test\", function() { return get_default_test; });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"./utils.js\");\n\n\n//\n// Contains a list of Universe configurations used to test the different\n// features of Gravitle.\n//\n\nconst get_test_1 = (conf) => {\n    const test = {\n        id: 'heart',\n        title: 'Heart',\n        description: `\n            A heart collapses.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.stabilise_positions_enabled = true;\n    test.conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 20\n        }, {\n            \"x\": 10,\n            \"y\": 30\n        }, {\n            \"x\": 20,\n            \"y\": 30\n        }, {\n            \"x\": 30,\n            \"y\": 20\n        }, {\n            \"x\": 20,\n            \"y\": 5\n        }, {\n            \"x\": 10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -20\n        }, {\n            \"x\": -10,\n            \"y\": 30\n        }, {\n            \"x\": -20,\n            \"y\": 30\n        }, {\n            \"x\": -30,\n            \"y\": 20\n        }, {\n            \"x\": -20,\n            \"y\": 5\n        }, {\n            \"x\": -10,\n            \"y\": -10\n        }, {\n            \"x\": 0,\n            \"y\": -35\n        }\n    ];\n    return test;\n}\n\nconst get_test_2 = (conf) => {\n    const test = {\n        id: 'diamond',\n        title: 'Diamond',\n        description: `\n            Two particles coming from the bottom help a third one to escape.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.particles = [\n        {\n            \"x\": -30,\n            \"y\": -40,\n            \"fixed\": false\n        }, {\n            \"x\": -30,\n            \"y\": -41,\n            \"fixed\": false\n        }, {\n            \"x\": 0,\n            \"y\": 41,\n            \"fixed\": false\n        }, {\n            \"x\": 20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": 20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": 20,\n            \"fixed\": true\n        }, {\n            \"x\": -20,\n            \"y\": -20,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true\n        }, {\n            \"x\": 0,\n            \"y\": -40,\n            \"fixed\": true\n        }, {\n            \"x\": 40,\n            \"y\": 0,\n            \"fixed\": true\n        }, {\n            \"x\": -40,\n            \"y\": 0,\n            \"fixed\": true\n        }\n    ];\n    return test;\n}\n\nconst get_test_3 = (conf) => {\n    const test = {\n        id: 'club',\n        title: 'Club',\n        description: `\n            Three particles are static. Three particles move around them.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.particles = [\n        {\n            \"x\": 0.01,\n            \"y\": -25,\n            \"fixed\": false\n        },\n        {\n            \"x\": 10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": -10,\n            \"y\": -35,\n            \"fixed\": false\n        },\n        {\n            \"x\": 0,\n            \"y\": 40,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": 40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": -40,\n            \"y\": -10,\n            \"fixed\": true,\n            \"diameter\": 5,\n            \"mass\": 5\n        }\n    ];\n    return test;\n};\n\nconst get_test_4 = (conf) => {\n    const test = {\n        id: 'spade',\n        title: 'Spade',\n        description: `\n            Coming from above, a particle destroys all the links.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.intersection_behavior = 'destroy-link';\n    test.conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 35\n        },\n        {\n            \"x\": 10,\n            \"y\": 25,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": 25,\n            \"fixed\": true\n        },{\n            \"x\": 15,\n            \"y\": 15,\n            \"fixed\": true\n        },\n        {\n            \"x\": -15,\n            \"y\": 15,\n            \"fixed\": true\n        },{\n            \"x\": 20,\n            \"y\": 5,\n            \"fixed\": true\n        },\n        {\n            \"x\": -20,\n            \"y\": 5,\n            \"fixed\": true\n        },{\n            \"x\": 15,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": -15,\n            \"y\": 0,\n            \"fixed\": true\n        },{\n            \"x\": 5,\n            \"y\": -5,\n            \"fixed\": true\n        },\n        {\n            \"x\": -5,\n            \"y\": -5,\n            \"fixed\": true\n        },{\n            \"x\": 10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": -10,\n            \"fixed\": true\n        }\n    ];\n    test.conf.links = [\n        {\n            \"p1_index\": 1,\n            \"p2_index\": 2\n        }, {\n            \"p1_index\": 3,\n            \"p2_index\": 4\n        }, {\n            \"p1_index\": 5,\n            \"p2_index\": 6\n        }, {\n            \"p1_index\": 7,\n            \"p2_index\": 8\n        }, {\n            \"p1_index\": 9,\n            \"p2_index\": 10\n        }, {\n            \"p1_index\": 11,\n            \"p2_index\": 12\n        }\n    ];\n    return test;\n}\n\nconst get_test_5 = (conf) => {\n    const test = {\n        id: 'v',\n        title: 'Test V',\n        description: `\n            If a particle hits a link, the particle should be destroyed.\n            If particle forming links is destroyed, its links should be destroyed too.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.intersection_behavior = 'destroy-particle';\n    test.conf.default_link_strengh = 0.0;\n    test.conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 0\n        },\n        {\n            \"x\": -10,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 10,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": -10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": 10,\n            \"y\": -10,\n            \"fixed\": true\n        },\n        {\n            \"x\": -40,\n            \"y\": 35,\n            \"fixed\": false\n        },\n        {\n            \"x\": 40,\n            \"y\": 35,\n            \"fixed\": false\n        },\n        {\n            \"x\": -50,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 51,\n            \"y\": 30,\n            \"fixed\": true\n        }\n    ];\n    test.conf.links = [\n        {\n            \"p1_index\": 0,\n            \"p2_index\": 1\n        },\n        {\n            \"p1_index\": 0,\n            \"p2_index\": 2\n        },\n        {\n            \"p1_index\": 3,\n            \"p2_index\": 4\n        },\n        {\n            \"p1_index\": 5,\n            \"p2_index\": 6\n        }\n    ];\n    return test;\n}\n\nconst get_test_6 = (conf) => {\n    const test = {\n        id: 'test_6',\n        title: 'Test 6',\n        description: `\n            8 particles move tomards the center and should form a perfect square.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.collision_behavior = 'create-link';\n    test.conf.intersection_behavior = 'destroy-link';\n    test.conf.gravitational_constant = 100;\n    test.conf.default_link_length = 10;\n    test.conf.default_link_strengh = 1000;\n    test.conf.drag_coefficient = 1;\n    test.conf.stabilise_positions_enabled = false;\n    test.conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": 30,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": -30,\n            \"y\": 0,\n            \"fixed\": true\n        },\n        {\n            \"x\": 0,\n            \"y\": 30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 0,\n            \"y\": -30,\n            \"fixed\": true\n        },\n        {\n            \"x\": 20,\n            \"y\": 20\n        },\n        {\n            \"x\": 20,\n            \"y\": -20\n        },\n        {\n            \"x\": -20,\n            \"y\": 20\n        },\n        {\n            \"x\": -20,\n            \"y\": -20\n        },\n        {\n            \"x\": 0,\n            \"y\": 20\n        },\n        {\n            \"x\": 0,\n            \"y\": -20\n        },\n        {\n            \"x\": 20,\n            \"y\": 0\n        },\n        {\n            \"x\": -20,\n            \"y\": 0\n        }\n    ];\n    return test;\n}\n\nconst get_test_7 = (conf) => {\n    const test = {\n        id: 'test_7',\n        title: 'Test 7',\n        description: `\n            Two particles at the exact same position should create a vertical link.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.collision_behavior = 'create-link';\n    test.conf.intersection_behavior = 'destroy-link';\n    test.conf.gravitational_constant = 100;\n    test.conf.default_link_length = 10;\n    test.conf.default_link_strengh = 1000;\n    test.conf.drag_coefficient = 1;\n    test.conf.stabilise_positions_enabled = false;\n    test.conf.particles = [\n        {\n            \"x\": 0,\n            \"y\": 0\n        },\n        {\n            \"x\": 0,\n            \"y\": 0\n        }\n    ];\n    return test;\n}\n\nconst get_test_8 = (conf) => {\n    const test = {\n        id: 'test_8',\n        title: 'Intersecting links',\n        description: `\n            Intersecting links should get destroyed.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.collision_behavior = 'create-link';\n    test.conf.link_intersection_behavior = 'destroy-links';\n    test.conf.drag_coefficient = 1;\n    test.conf.gravitational_constant = 100;\n    test.conf.particles = [\n        {\n            x: 0.1,\n            y: 0\n        },\n        {\n            x: 0.2,\n            y: 0\n        },\n        {\n            x: 0.3,\n            y: 0.1\n        },\n        {\n            x: 4,\n            y: 0\n        }\n    ];\n    return test;\n}\n\nconst get_test_9 = () => {\n    const test = {\n        id: 'test_9',\n        title: 'Triangles wrapping around',\n        description: `\n            Two triangles should go upward, wrap around to appear at the bottom\n            and then collide with the bottom particle and create links between\n            itself and the particle.\n            Links should then be destroyed when they intersect and be created\n            again when two particle collides.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.wrap_around = true;\n    test.conf.drag_coefficient = 0.001;\n    test.conf.collision_behavior = 'create-link';\n    test.conf.link_intersection_behavior = 'destroy-links';\n    test.conf.particles = [\n        {\n            x: 1,\n            y: 80\n        },\n        {\n            x: 2,\n            y: 90\n        },\n        {\n            x: -5,\n            y: 85\n        },\n        {\n            x: 5,\n            y: 85\n        },\n        {\n            x: 0,\n            y: -50,\n            fixed: true,\n            mass: 10,\n            diameter: 10\n        }\n    ];\n    test.conf.links = [\n        {\n            p1_index: 0,\n            p2_index: 1\n        },{\n            p1_index: 1,\n            p2_index: 2\n        },{\n            p1_index: 2,\n            p2_index: 0\n        },{\n            p1_index: 1,\n            p2_index: 3\n        },{\n            p1_index: 3,\n            p2_index: 0\n        }\n    ];\n    return test;\n};\n\nconst get_test_10 = () => {\n    const test = {\n        id: 'test_10',\n        title: 'Small spaceship',\n        description: `\n            Use [A, Z, E] or [Q, W, E] or [1, 2, 3] or [4, 5, 6] or [Left, Up, Right] to move.\n            Don't get hit.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"](),\n        bindings: {\n            'ArrowLeft' : {\n                link_indexes : [0]\n            },\n            'ArrowUp' : {\n                link_indexes : [1]\n            },\n            'ArrowRight' : {\n                link_indexes : [2]\n            },\n            'a' : {\n                link_indexes : [0]\n            },\n            'z' : {\n                link_indexes : [1]\n            },\n            'e' : {\n                link_indexes : [2]\n            },\n            'q' : {\n                link_indexes : [0]\n            },\n            'w' : {\n                link_indexes : [1]\n            },\n            'e' : {\n                link_indexes : [2]\n            },\n            '1' : {\n                link_indexes : [0]\n            },\n            '2' : {\n                link_indexes : [1]\n            },\n            '3' : {\n                link_indexes : [2]\n            },\n            '4' : {\n                link_indexes : [2]\n            },\n            '5' : {\n                link_indexes : [1]\n            },\n            '6' : {\n                link_indexes : [0]\n            }\n        }\n    };\n    test.conf.wrap_around = true;\n    test.conf.width = 300;\n    test.conf.height = 300;\n    test.conf.drag_coefficient = 0.025;\n    test.conf.intersection_behavior = 'destroy-link';\n    test.conf.link_intersection_behavior = 'destroy-links';\n    test.conf.default_link_strengh = 1000.0;\n    test.conf.default_link_thrust_force = 1000.0;\n    test.conf.particles = [\n        {x: -15, y: 5},\n        {x: -5, y: 5},\n        {x: 5, y: 5},\n        {x: 15, y: 5},\n        {x: -20, y: 0},\n        {x: -10, y: 0},\n        {x: 0, y: 0},\n        {x: 10, y: 0},\n        {x: 20, y: 0},\n        {x: -5, y: -5},\n        {x: 5, y: -5},\n        {x: 0, y: -100, diameter: 5, mass:5 }\n    ];\n    const THRUST = 100.0;\n    test.conf.links = [\n        {\n            p1_index: 4,\n            p2_index: 5\n        }, {\n            p1_index: 9,\n            p2_index: 10\n        }, {\n            p1_index: 7,\n            p2_index: 8\n        }, {\n            p1_index: 4,\n            p2_index: 0\n        }, {\n            p1_index: 0,\n            p2_index: 5\n        }, {\n            p1_index: 0,\n            p2_index: 1\n        }, {\n            p1_index: 5,\n            p2_index: 9\n        }, {\n            p1_index: 1,\n            p2_index: 6\n        }, {\n            p1_index: 6,\n            p2_index: 2\n        }, {\n            p1_index: 6,\n            p2_index: 7\n        }, {\n            p1_index: 6,\n            p2_index: 10\n        }, {\n            p1_index: 2,\n            p2_index: 3\n        }, {\n            p1_index: 2,\n            p2_index: 7\n        }, {\n            p1_index: 10,\n            p2_index: 7\n        }, {\n            p1_index: 3,\n            p2_index: 7\n        }, {\n            p1_index: 3,\n            p2_index: 8\n        }, {\n            p1_index: 5,\n            p2_index: 1\n        }, {\n            p1_index: 9,\n            p2_index: 6\n        }, {\n            p1_index: 5,\n            p2_index: 6\n        }, {\n            p1_index: 5,\n            p2_index: 6\n        }, {\n            p1_index: 1,\n            p2_index: 2\n        }\n    ];\n    return test;\n};\n\nconst get_test_11 = () => {\n    const test = {\n        id: 'test_11',\n        title: 'Particle link intersection',\n        description: `\n            A particle is fixed at the center. A link comes from the right.\n            When the moving link intersect with the fixed particle, the link\n            is destroyed.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.intersection_behavior = 'destroy-link';\n    test.conf.particles = [\n        {\n            x: 1,\n            y: 0,\n            fixed: true\n        },\n        {\n            x: 20,\n            y: -5\n        },\n        {\n            x: 20,\n            y: 5\n        }\n    ];\n    test.conf.links = [\n        {\n            p1_index: 1,\n            p2_index: 2\n        }\n    ];\n    return test;\n};\n\nconst get_test_12 = () => {\n    const test = {\n        id: 'test_12',\n        mode: 'SPACE-SHIP',\n        title: 'Spaceship generator',\n        description: `\n            After the 200th tick, try to move using [A, Z] or [Q, W].\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.particles = [];\n    test.conf.links = [];\n    test.conf.collision_behavior = 'create-link';\n    test.conf.intersection_behavior = 'do-nothing';\n    test.conf.link_intersection_behavior = 'do-nothing';\n    test.conf.gravitational_constant = 1;\n    test.conf.default_link_length = 10;\n    test.conf.default_link_strengh = 1000;\n    test.conf.drag_coefficient = 1;\n    test.conf.stabilise_positions_enabled = false;\n    test.conf.minimal_distance_for_gravity = 1.0;\n    test.conf.wrap_around = true;\n    test.conf.default_link_thrust_force = 1000.0;\n    const COUNT = 20;\n    const DIVISOR = 20;\n    const particles = [];\n    const minDiameter = 4.0;\n    const maxDiameter = 5.0;\n    const MASS = 1.0;\n    const diameter = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](minDiameter, maxDiameter);\n    particles.push({\n        x: 0,\n        y: 0,\n        mass: MASS,\n        diameter: diameter\n    });\n    for (let i = 2 ; i < COUNT ; i += 2) {\n        const x = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](\n            - test.conf.width / DIVISOR,\n            test.conf.width / DIVISOR);\n        const y = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](\n            - test.conf.height / DIVISOR,\n            test.conf.height / DIVISOR);\n        const diameter = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](minDiameter, maxDiameter);\n        particles.push({\n            x: x,\n            y: y,\n            mass: MASS,\n            diameter: diameter\n        });\n    }\n    const l = particles.length;\n    for (let i = l-1 ; i >= 0 ; i -= 1) {\n        const particle = particles[i];\n        particles.push({\n            x: -particle.x,\n            y: particle.y,\n            mass: particle.mass,\n            diameter: particle.diameter\n        });\n    }\n    test.conf.particles = particles;\n    return test;\n};\n\nconst get_test_13 = () => {\n    const isInZones = (x, y, zones, zoneRadius) => {\n        let r = false;\n        for (const index in zones) {\n            const zone = zones[index];\n            if (_utils_js__WEBPACK_IMPORTED_MODULE_0__[\"circles_collide\"](x, y, zone.x, zone.y, zone.radius, zoneRadius)) {\n                r = true;\n            } else {\n                // Do nothing\n            }\n        }\n        return r;\n    };\n\n    const test = {\n        id: 'test_13',\n        mode: 'SPACE-CROQUET',\n        title: 'Space croquet',\n        description: `\n            Click and drag on canvas, Launching particles, Destroy all the links.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.intersection_behavior = 'destroy-link';\n    test.conf.wrap_around = true;\n    const particles = [];\n    const links = [];\n    const zones = [];\n    const maxDiameter = 5.0;\n    const checkpointLength = test.conf.width / 8;\n    const innerRadius = checkpointLength / 2;\n    const zoneRadius = innerRadius + maxDiameter / 2;\n    const SPACE_CROQUET_LINK_COUNT = 4;\n    for (let i = 0 ; i < SPACE_CROQUET_LINK_COUNT ; i += 1) {\n        let x = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_int_inclusive\"](- test.conf.width / 4, test.conf.width / 4);\n        let y = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_int_inclusive\"](- test.conf.height / 4, test.conf.height / 4);\n        let i = 1000;\n        while (isInZones(x, y, zones, zoneRadius) && i > 0) {\n            x = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_int_inclusive\"](- test.conf.width / 4, test.conf.width / 4);\n            y = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_int_inclusive\"](- test.conf.height / 4, test.conf.height / 4);\n            i -= 1;\n        }\n        if (i) {\n            zones.push({\n                x: x,\n                y: y,\n                diameter: zoneRadius * 2,\n                radius: zoneRadius,\n                fixed: true\n            });\n        }\n    }\n    for (let i = 0 ; i < zones.length ; i += 1) {\n        const mass = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](maxDiameter, maxDiameter);\n        const fixed = true;\n        const diameter = mass;\n        const angle = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_int_inclusive\"](0, 359);\n        const p1 = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_coordinate_rotated_around\"](\n            {\n                x: zones[i].x,\n                y: zones[i].y\n            },\n            {\n                x: zones[i].x + innerRadius,\n                y: zones[i].y\n            },\n            angle\n        );\n        const p2 = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_coordinate_rotated_around\"](\n            {\n                x: zones[i].x,\n                y: zones[i].y\n            },\n            {\n                x: zones[i].x - innerRadius,\n                y: zones[i].y\n            },\n            angle\n        );\n        particles.push({\n            x: p1.x,\n            y: p1.y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        particles.push({\n            x: p2.x,\n            y: p2.y,\n            mass: mass,\n            fixed: fixed,\n            diameter: diameter\n        });\n        links.push({\n            \"p1_index\": i*2,\n            \"p2_index\": i*2+1\n        });\n    }\n    test.conf.particles = particles;\n    test.conf.links = links;\n    return test;\n};\n\nconst get_test_14 = () => {\n    const test = {\n        id: 'test_14',\n        mode: 'test_14',\n        title: 'Collision response',\n        description: `\n            Two particles move toward each other.\n            They bounce when colliding.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    const diameter = 20;\n    test.conf.collision_behavior = 'push-particles';\n    test.conf.gravitational_constant = 20.0;\n    test.conf.default_push_force = 100.0;\n    test.conf.particles = [\n        {\n            x: -5,\n            y: 3,\n            diameter: diameter,\n            mass: diameter\n        },\n        {\n            x: 25,\n            y: 9,\n            diameter: diameter,\n            mass: diameter\n        }\n    ];\n    return test;\n};\n\nconst get_test_15 = () => {\n    const test = {\n        id: 'test_15',\n        mode: 'test_15',\n        title: '512 particles',\n        description: `\n            512 free floating particles. The simulation should remain fluid.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    test.conf.wrap_around = false;\n    test.conf.gravitational_constant = 5.12;\n    test.conf.width = 512;\n    test.conf.height = 512;\n    let particles = [];\n    for (let i = 0 ; i < 512 ; i += 1) {\n        const x = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](- test.conf.width * 0.2, test.conf.width * 0.2);\n        const y = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](- test.conf.height * 0.2, test.conf.height * 0.2);\n        const mass = _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_random_number\"](0.512, 5.12);\n        const diameter = mass;\n        particles.push({\n            x: x,\n            y: y,\n            mass: mass,\n            diameter: diameter\n        });\n    }\n    test.conf.particles = particles;\n    return test;\n};\n\nconst get_test_16 = () => {\n    const test = {\n        id: 'test_16',\n        mode: 'test_16',\n        title: 'Collision response 2',\n        description: `\n            Two particles move toward each other.\n            They bounce when colliding.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    const diameter = 20;\n    test.conf.collision_behavior = 'push-particles';\n    test.conf.gravitational_constant = 20.0;\n    test.conf.default_push_force = 100.0;\n    test.conf.particles = [\n        {\n            x: -5,\n            y: 3,\n            diameter: 0.5,\n            mass: diameter\n        },\n        {\n            x: 25,\n            y: 9,\n            diameter: diameter,\n            mass: diameter\n        }\n    ];\n    return test;\n};\n\nconst get_test_17 = () => {\n    const test = {\n        id: 'test_17',\n        mode: 'test_17',\n        title: 'Collision response 3',\n        description: `\n            Two particles starts on top of each other.\n            Push response to collisions is activated, which makes this configuration impossible.\n            The two particles are moved so they don't overlap anymore.\n        `,\n        conf: _utils_js__WEBPACK_IMPORTED_MODULE_0__[\"get_base_conf_copy\"]()\n    };\n    const diameter = 20;\n    test.conf.collision_behavior = 'push-particles';\n    test.conf.gravitational_constant = 20.0;\n    test.conf.default_push_force = 100.0;\n    test.conf.particles = [\n        {\n            \"x\": 5,\n            \"y\": 0,\n            \"diameter\": 5,\n            \"mass\": 5\n        },\n        {\n            \"x\": 0,\n            \"y\": 0,\n            \"diameter\": 20,\n            \"mass\": 20\n        }\n    ];\n    return test;\n};\n\nconst get_default_test = () => {\n    return get_tests()[0].id;\n};\n\nconst get_tests = () => {\n    let list = [];\n    list.push(get_test_10());\n    list.push(get_test_12());\n    list.push(get_test_13());\n    list.push(get_test_1());\n    list.push(get_test_2());\n    list.push(get_test_3());\n    list.push(get_test_4());\n    list.push(get_test_5());\n    list.push(get_test_6());\n    list.push(get_test_7());\n    list.push(get_test_8());\n    list.push(get_test_9());\n    list.push(get_test_11());\n    list.push(get_test_15());\n    list.push(get_test_14());\n    list.push(get_test_16());\n    list.push(get_test_17());\n    return list;\n};\n\nconst get_test_by_id = (id) => {\n    let tests = get_tests();\n    let return_test = null;\n    tests.forEach(test => {\n        if (test.id === id) {\n            return_test = test;\n        } else {\n            // Do nothing\n        }\n    });\n    return return_test;\n};\n\n\n\n\n//# sourceURL=webpack:///./tests.js?");

/***/ }),

/***/ "./utils.js":
/*!******************!*\
  !*** ./utils.js ***!
  \******************/
/*! exports provided: get_base_conf_copy, get_random_number, get_random_int_inclusive, circles_collide, get_distance_squared, get_coordinate_rotated_around */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_base_conf_copy\", function() { return get_base_conf_copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_random_number\", function() { return get_random_number; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_random_int_inclusive\", function() { return get_random_int_inclusive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"circles_collide\", function() { return circles_collide; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_distance_squared\", function() { return get_distance_squared; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"get_coordinate_rotated_around\", function() { return get_coordinate_rotated_around; });\nconst BASE_CONF = Object.freeze({\n    algorithm: 'verlet',\n    collision_behavior: 'do-nothing',\n    intersection_behavior: 'do-nothing',\n    link_intersection_behavior: 'do-nothing',\n    wrap_around: false,\n    wrap_around_behavior: 'do-nothing',\n    fixed_clone_count: true,\n    width: 200,\n    height: 200,\n    delta_time: 0.01,\n    gravitational_constant: 66.74,\n    minimal_distance_for_gravity: 1.0,\n    default_link_length: 10.0,\n    default_link_strengh: 100.0,\n    default_link_thrust_force: 100.0,\n    default_push_force: 100.0,\n    drag_coefficient: 0.0,\n    stabilise_positions_enabled: false,\n    stabiliser_power: 10,\n    particles: [],\n    links: []\n});\n\nconst get_base_conf_copy = () => {\n    return JSON.parse(JSON.stringify(BASE_CONF));\n};\n\nconst get_random_boolean = () => {\n    return Math.random() > 0.5;\n}\n\nconst get_random_number = (min, max) => {\n    return Math.random() * (max - min) + min;\n}\n\nconst get_random_int_inclusive = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n}\n\nconst circles_collide = (x1, y1, x2, y2, zoneRadius1, zoneRadius2) => {\n    const distance_squared_centers = get_distance_squared(x1, y1, x2, y2);\n    const diameters_squared = (zoneRadius1 + zoneRadius2) * (zoneRadius1 + zoneRadius2);\n    return distance_squared_centers < diameters_squared;\n}\n\nconst get_distance_squared = (x1, y1, x2, y2) => {\n    const delta_x = x1 - x2;\n    const delta_y = y1 - y2;\n    return delta_x * delta_x + delta_y * delta_y;\n}\n\nconst get_coordinate_rotated_around = (center, point, angle) => {\n    const angleRad = (angle) * (Math.PI / 180);\n    return {\n        x: Math.cos(angleRad) * (point.x - center.x) - Math.sin(angleRad) * (point.y - center.y) + center.x,\n        y: Math.sin(angleRad) * (point.x - center.x) + Math.cos(angleRad) * (point.y - center.y) + center.y\n    };\n}\n\n\n\n\n//# sourceURL=webpack:///./utils.js?");

/***/ }),

/***/ "./webgl-renderer.js":
/*!***************************!*\
  !*** ./webgl-renderer.js ***!
  \***************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return WebGLRenderer; });\n//\n// Shaders\n//\nconst vertex_shader_links_source = `#version 300 es\n    in vec2 a_position;\n    uniform vec2 u_resolution;\n    void main() {\n        vec2 position = a_position / u_resolution;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\n\nconst fragment_shader_links_source = `#version 300 es\n    precision mediump float;\n    out vec4 outColor;\n    void main() {\n        outColor = vec4(1, 1, 1, 1);\n    }\n`;\n\nconst fragment_shader_thrusting_links_source = `#version 300 es\n    precision mediump float;\n    out vec4 outColor;\n    void main() {\n        outColor = vec4(0.5, 0.5, 1, 1);\n    }\n`;\n\nconst vertex_shader_particles_source = `#version 300 es\n    in vec2 a_position;\n    in vec2 a_center;\n    in float a_radius;\n    uniform vec2 u_resolution;\n    out vec2 position;\n    out vec2 center;\n    out float radius;\n    void main() {\n        radius = a_radius;\n        position = a_position;\n        center = a_center;\n        gl_Position = vec4(a_position / u_resolution, 0, 1);\n    }\n`;\n\nconst fragment_shader_particles_source = `#version 300 es\n    precision mediump float;\n    in vec2 position;\n    in vec2 center;\n    in float radius;\n    out vec4 outColor;\n    void main() {\n        if (distance(center, position) < radius && distance(center, position) > radius * 0.5) {\n            outColor = vec4(1, 1, 1, 1);\n        } else {\n            outColor = vec4(0, 0, 0, 0);\n        }\n    }\n`;\n\nconst vertex_shader_gravitational_field_source = `#version 300 es\n    in vec2 a_position;\n    in float a_field_value;\n    uniform vec2 u_resolution;\n    out float field_value;\n    void main() {\n        field_value = a_field_value;\n        vec2 position = a_position / u_resolution;\n        gl_Position = vec4(position, 0, 1);\n    }\n`;\n\nconst fragment_shader_gravitational_field_source = `#version 300 es\n    precision mediump float;\n    in float field_value;\n    out vec4 outColor;\n    void main() {\n        outColor = vec4(\n            field_value * 0.9,\n            field_value * 0.9,\n            field_value * 0.9,\n            1\n        );\n    }\n`;\n\nconst trajectories_vertex_shader_source = `#version 300 es\n    in vec2 a_position;\n    in vec2 a_center;\n    in float a_radius;\n    uniform vec2 u_resolution;\n    out vec2 position;\n    out vec2 center;\n    out float radius;\n    void main() {\n        radius = a_radius;\n        position = a_position;\n        center = a_center;\n        gl_Position = vec4(a_position / u_resolution, 0, 1);\n    }\n`;\n\nconst trajectories_fragment_shader_source = `#version 300 es\n    precision mediump float;\n    in vec2 position;\n    in vec2 center;\n    in float radius;\n    out vec4 outColor;\n    void main() {\n        if (distance(center, position) < radius) {\n            outColor = vec4(.25, .25, .25, 1);\n        } else {\n            outColor = vec4(0, 0, 0, 0);\n        }\n    }\n`;\n\nconst launchers_vertex_shader_source  = `#version 300 es\n    in vec2 a_position;\n    uniform vec2 u_resolution;\n    void main() {\n        gl_Position = vec4(a_position / u_resolution, 0, 1);\n    }\n`;\n\nconst launchers_fragment_shader_source = `#version 300 es\n    precision mediump float;\n    out vec4 color_out;\n    void main() {\n        float shade = 0.6;\n        color_out = vec4(\n            shade,\n            shade,\n            shade,\n            1\n        );\n    }\n`;\n\nconst current_launcher_vertex_shader_source  = `#version 300 es\n    in vec2 a_position;\n    uniform vec2 u_resolution;\n    void main() {\n        gl_Position = vec4(a_position / u_resolution, 0, 1);\n    }\n`;\n\nconst current_launcher_fragment_shader_source = `#version 300 es\n    precision mediump float;\n    out vec4 color_out;\n    void main() {\n        color_out = vec4(\n            0.75,\n            0.75,\n            1,\n            1\n        );\n    }\n`;\n\nconst thrusting_links_trails_vertex_shader_source = `#version 300 es\n    in float a_thrust_activated;\n    in float a_age;\n    in vec2 a_position;\n    uniform vec2 u_resolution;\n    out float thrust_activated;\n    out float age;\n    void main() {\n        thrust_activated = a_thrust_activated;\n        age = a_age;\n        gl_Position = vec4(a_position / u_resolution, 0, 1);\n    }\n`;\n\nconst thrusting_links_trails_fragment_shader_source = `#version 300 es\n    precision mediump float;\n    in float thrust_activated;\n    in float age;\n    out vec4 outColor;\n    void main() {\n        if (thrust_activated > 0.5) {\n            float transparency = (1.0 - age) * (1.0 - age) * (1.0 - age);\n            transparency *= 0.5;\n            outColor = vec4(0.0, 0.5, 1.0, transparency);\n        } else {\n            outColor = vec4(0.0, 0.0, 0.0, 0.0);\n        }\n    }\n`;\n\n//\n// Returns a compiled shader.\n//\nconst create_shader = (webgl_context, type, source) => {\n    const shader = webgl_context.createShader(type);\n    webgl_context.shaderSource(shader, source);\n    webgl_context.compileShader(shader);\n    const success = webgl_context.getShaderParameter(shader, webgl_context.COMPILE_STATUS);\n    if (success) {\n        return shader;\n    } else {\n        console.warn(webgl_context.getShaderInfoLog(shader));\n        webgl_context.deleteShader(shader);\n    }\n}\n\n//\n// Returns a compiled program using compiled shaders.\n//\nconst create_program = (gl, vertexShader, fragmentShader) => {\n    var program = gl.createProgram();\n    gl.attachShader(program, vertexShader);\n    gl.attachShader(program, fragmentShader);\n    gl.linkProgram(program);\n    var success = gl.getProgramParameter(program, gl.LINK_STATUS);\n    if (success) {\n        return program;\n    }\n    console.log(gl.getProgramInfoLog(program));\n    gl.deleteProgram(program);\n}\n\n//\n// Returns a compiled program from shader sources\n//\nconst create_program_from_sources = (\n    webgl_context,\n    vertex_shader_source,\n    fragment_shader_source\n) => {\n    return create_program(\n        webgl_context,\n        create_shader(\n            webgl_context,\n            webgl_context.VERTEX_SHADER,\n            vertex_shader_source\n        ),\n        create_shader(\n            webgl_context,\n            webgl_context.FRAGMENT_SHADER,\n            fragment_shader_source\n        )\n    );\n}\n\n//\n// WebGL renderer.\n// Draws \n//\nclass WebGLRenderer {\n\n    //\n    // Constructor\n    //\n    constructor (\n        webgl_context\n    ) {\n        this.webgl_context = webgl_context;\n        this.thrusting_link_history = [];\n\n        //\n        // Setup blending\n        //\n        this.webgl_context.enable(this.webgl_context.BLEND);\n        // At first, used additive blending to stack up drawings\n        // Source : https://stackoverflow.com/a/35544537\n        //this.webgl_context.blendFunc(\n        //    this.webgl_context.ONE,\n        //    this.webgl_context.ONE_MINUS_SRC_ALPHA\n        //);\n        // Now use another way, which looks better\n        this.webgl_context.blendFunc(\n            this.webgl_context.SRC_ALPHA,\n            this.webgl_context.ONE\n        );\n\n        ////////////////////////////////////////////////////////////////////////\n        // Create all shaders and programs and look up locations\n        ////////////////////////////////////////////////////////////////////////\n\n        //\n        // Links init\n        //\n        this.links_program = create_program_from_sources(\n            this.webgl_context,\n            vertex_shader_links_source,\n            fragment_shader_links_source\n        );\n        this.links_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.links_program,\n            \"u_resolution\"\n        );\n        this.links_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.links_program,\n            'a_position'\n        );\n        this.links_position_buffer = this.webgl_context.createBuffer();\n        this.links_vao = this.webgl_context.createVertexArray();\n        //\n        // Thrusting links init\n        //\n        this.thrusting_links_program = create_program_from_sources(\n            this.webgl_context,\n            vertex_shader_links_source,\n            fragment_shader_thrusting_links_source\n        );\n        this.thrusting_links_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.thrusting_links_program,\n            \"u_resolution\");\n        this.thrusting_links_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.thrusting_links_program,\n            'a_position');\n        this.thrusting_links_position_buffer = this.webgl_context.createBuffer();\n        //\n        // Init particles\n        //\n        this.particles_program = create_program_from_sources(\n            this.webgl_context,\n            vertex_shader_particles_source,\n            fragment_shader_particles_source\n        );\n        this.particles_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.particles_program,\n            'u_resolution'\n        );\n        this.particles_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.particles_program,\n            'a_position'\n        );\n        this.particles_center_attribute_location = this.webgl_context.getAttribLocation(\n            this.particles_program,\n            'a_center'\n        );\n        this.particles_radius_attribute_location = this.webgl_context.getAttribLocation(\n            this.particles_program,\n            'a_radius'\n        );\n        this.particles_position_buffer = this.webgl_context.createBuffer();\n        this.particles_center_buffer = this.webgl_context.createBuffer();\n        this.particles_radius_buffer = this.webgl_context.createBuffer();\n        this.particles_vao = this.webgl_context.createVertexArray();\n        //\n        // Init gravitational grid\n        //\n        this.gravitational_grid_program = create_program_from_sources(\n            this.webgl_context,\n            vertex_shader_gravitational_field_source,\n            fragment_shader_gravitational_field_source\n        );\n        this.gravitational_grid_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.gravitational_grid_program,\n            'u_resolution'\n        );\n        this.gravitational_grid_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.gravitational_grid_program,\n            'a_position'\n        );\n        this.gravitational_grid_field_value_attribute_location = this.webgl_context.getAttribLocation(\n            this.gravitational_grid_program,\n            'a_field_value'\n        );\n        this.gravitational_grid_position_buffer = this.webgl_context.createBuffer();\n        this.gravitational_grid_field_value_buffer = this.webgl_context.createBuffer();\n        this.gravitational_grid_vao = this.webgl_context.createVertexArray();\n        //\n        // Init trajectories\n        //\n        this.trajectories_program = create_program_from_sources(\n            this.webgl_context,\n            trajectories_vertex_shader_source,\n            trajectories_fragment_shader_source\n        );\n        this.trajectories_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.trajectories_program,\n            'u_resolution'\n        );\n        this.trajectories_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.trajectories_program,\n            'a_position'\n        );\n        this.trajectories_center_attribute_location = this.webgl_context.getAttribLocation(\n            this.trajectories_program,\n            'a_center'\n        );\n        this.trajectories_radius_attribute_location = this.webgl_context.getAttribLocation(\n            this.trajectories_program,\n            'a_radius'\n        );\n        this.trajectories_position_buffer = this.webgl_context.createBuffer();\n        this.trajectories_center_buffer = this.webgl_context.createBuffer();\n        this.trajectories_radius_buffer = this.webgl_context.createBuffer();\n        this.trajectories_vao = this.webgl_context.createVertexArray();\n        //\n        // Launchers init\n        //\n        this.launchers_program = create_program_from_sources(\n            this.webgl_context,\n            launchers_vertex_shader_source,\n            launchers_fragment_shader_source\n        );\n        this.launchers_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.launchers_program,\n            \"u_resolution\");\n        this.launchers_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.launchers_program,\n            'a_position');\n        this.launchers_position_buffer = this.webgl_context.createBuffer();\n        this.launchers_vao = this.webgl_context.createVertexArray();\n        //\n        // Current launcher init\n        //\n        this.current_launcher_program = create_program_from_sources(\n            this.webgl_context,\n            current_launcher_vertex_shader_source,\n            current_launcher_fragment_shader_source\n        );\n        this.current_launcher_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.current_launcher_program,\n            \"u_resolution\");\n        this.current_launcher_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.current_launcher_program,\n            'a_position');\n        this.current_launcher_position_buffer = this.webgl_context.createBuffer();\n        this.current_launcher_vao = this.webgl_context.createVertexArray();\n        //\n        // Thrusting links trails init\n        //\n        this.thrusting_links_trails_program = create_program_from_sources(\n            this.webgl_context,\n            thrusting_links_trails_vertex_shader_source,\n            thrusting_links_trails_fragment_shader_source\n        );\n        this.thrusting_links_trails_resolution_uniform_location = this.webgl_context.getUniformLocation(\n            this.thrusting_links_trails_program,\n            \"u_resolution\");\n        this.thrusting_links_trails_position_attribute_location = this.webgl_context.getAttribLocation(\n            this.thrusting_links_trails_program,\n            'a_position');\n        this.thrusting_links_trails_thrust_activated_attribute_location = this.webgl_context.getAttribLocation(\n            this.thrusting_links_trails_program,\n            'a_thrust_activated');\n        this.thrusting_links_trails_age_attribute_location = this.webgl_context.getAttribLocation(\n            this.thrusting_links_trails_program,\n            'a_age');\n        this.thrusting_links_trails_position_buffer = this.webgl_context.createBuffer();\n        this.thrusting_links_trails_thrust_activated_buffer = this.webgl_context.createBuffer();\n        this.thrusting_links_trails_age_buffer = this.webgl_context.createBuffer();\n        this.thrusting_links_trails_vao = this.webgl_context.createVertexArray();\n    }\n\n    //\n    // Render function\n    // Main function.\n    // Calls specific functions to render each group of objects.\n    //\n    render (\n        links_data,\n        particles_data,\n        gravitational_grid,\n        gravitational_grid_resolution,\n        universe_width,\n        universe_height,\n        SHOW_GRAVITATIONAL_FIELD,\n        SHOW_TRAJECTORIES,\n        trajectories_data,\n        launchers_data,\n        DRAW_LAUNCHERS,\n        current_launcher_data,\n        links_state_data\n    ) {\n        //this.resize();\n        this.clear();\n        if (SHOW_GRAVITATIONAL_FIELD) {\n            this.draw_gravitational_grid(\n                gravitational_grid,\n                universe_width,\n                universe_height,\n                gravitational_grid_resolution\n            );\n        } else {\n            // Do nothing\n        }\n        if (SHOW_TRAJECTORIES) {\n            this.draw_trajectories(\n                trajectories_data,\n                universe_width,\n                universe_height\n            );\n        } else {\n            // Do nothing\n        }\n        if (DRAW_LAUNCHERS) {\n            this.draw_launchers(\n                launchers_data,\n                universe_width,\n                universe_height\n            );\n        } else {\n            // Do nothing\n        }\n        this.draw_current_launcher(\n            current_launcher_data,\n            universe_width,\n            universe_height\n        );\n        this.draw_links(\n            links_data,\n            universe_width,\n            universe_height\n        );\n        this.draw_particles(\n            particles_data,\n            universe_width,\n            universe_height\n        );\n        this.update_thrusting_link_trail_data(\n            links_state_data\n        );\n        this.draw_thrusting_links_trails(\n            this.thrusting_link_trails_positions_data,\n            universe_width,\n            universe_height,\n            this.thrusting_link_trails_thrust_activated_data,\n            this.thrusting_link_trails_age_data\n        );\n    }\n\n    //\n    // Draw gravitaional grid\n    //\n    draw_gravitational_grid(\n        gravitational_grid,\n        universe_width,\n        universe_height,\n        resolution\n    ) {\n        let data_field_value = [];\n        let data_coordinates = [];\n        for (let i = 0 ; i < resolution ; i += 1) {\n            for (let j = 0 ; j < resolution ; j += 1) {\n                const x_min = i * universe_width / resolution - universe_width / 2;\n                const y_min = j * universe_height / resolution - universe_height / 2;\n                const x_max = x_min + universe_width / resolution;\n                const y_max = y_min + universe_height / resolution;\n                data_coordinates.push(...[\n                    x_min, y_min,\n                    x_min, y_max,\n                    x_max, y_min,\n                    x_min, y_max,\n                    x_max, y_max,\n                    x_max, y_min\n                ]);\n                const field_value = gravitational_grid[i * resolution + j];\n                data_field_value.push(...[\n                    field_value,\n                    field_value,\n                    field_value,\n                    field_value,\n                    field_value,\n                    field_value\n                ]);\n            }\n        }\n        const size = 2;\n        const type = this.webgl_context.FLOAT;\n        const normalize = false;\n        const stride = 0;\n        const offset = 0;\n        this.webgl_context.bindVertexArray(this.gravitational_grid_vao);\n        // Coordinates\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.gravitational_grid_position_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data_coordinates),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.gravitational_grid_position_attribute_location,\n            size,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.gravitational_grid_position_attribute_location\n        );\n        // Field values\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.gravitational_grid_field_value_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data_field_value),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.gravitational_grid_field_value_attribute_location,\n            1,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.gravitational_grid_field_value_attribute_location\n        );\n        //\n        this.webgl_context.useProgram(this.gravitational_grid_program);\n        this.webgl_context.uniform2f(\n            this.gravitational_grid_resolution_uniform_location,\n            universe_width * 0.5,\n            universe_height * 0.5\n        );\n        this.webgl_context.drawArrays(\n            this.webgl_context.TRIANGLES,\n            offset,\n            data_coordinates.length / 2\n        );\n    }\n\n    //\n    // Draw particle trajectories\n    //\n    draw_trajectories(\n        trajectories,\n        universe_width,\n        universe_height\n    ) {\n        let data_positions = [];\n        let data_centers = [];\n        let data_radiuses = [];\n        for (let i = 0, l = trajectories.length, c = 2 ; i < l ; i += c) {\n            const length = 0.5;\n            data_positions.push(...[\n                trajectories[i] - length, trajectories[i + 1] - length,\n                trajectories[i] + length, trajectories[i + 1] - length,\n                trajectories[i] - length, trajectories[i + 1] + length,\n                trajectories[i] + length, trajectories[i + 1] + length,\n                trajectories[i] + length, trajectories[i + 1] - length,\n                trajectories[i] - length, trajectories[i + 1] + length\n            ]);\n        }\n        for (let i = 0, l = trajectories.length, c = 2 ; i < l ; i += c) {\n            const length = 0;\n            data_centers.push(...[\n                trajectories[i] - length, trajectories[i + 1] - length,\n                trajectories[i] + length, trajectories[i + 1] - length,\n                trajectories[i] - length, trajectories[i + 1] + length,\n                trajectories[i] + length, trajectories[i + 1] + length,\n                trajectories[i] + length, trajectories[i + 1] - length,\n                trajectories[i] - length, trajectories[i + 1] + length\n            ]);\n        }\n        for (let i = 0, l = trajectories.length, c = 2 ; i < l ; i += c) {\n            const radius = 0.5;\n            data_radiuses.push(...[\n                radius,\n                radius,\n                radius,\n                radius,\n                radius,\n                radius\n            ]);\n        }\n        const data_count = data_positions.length / 2;\n        const size = 2;          // 2 components per iteration\n        const type = this.webgl_context.FLOAT;   // the data is 32bit floats\n        const normalize = false; // don't normalize the data\n        const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n        const offset = 0;        // start at the beginning of the buffer\n        // bind the vertex array for that thing : call gl.bindVertexArray\n        this.webgl_context.bindVertexArray(this.trajectories_vao);\n        // for each attribute call gl.bindBuffer, bufferData, gl.vertexAttribPointer, gl.enableVertexAttribArray\n        // Positions\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.trajectories_position_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data_positions),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.trajectories_position_attribute_location,\n            size,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.trajectories_position_attribute_location\n        );\n        // Center\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.trajectories_center_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data_centers),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.trajectories_center_attribute_location,\n            size,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.trajectories_center_attribute_location\n        );\n        // Radii\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.trajectories_radius_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data_radiuses),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.trajectories_radius_attribute_location,\n            1,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.trajectories_radius_attribute_location\n        );\n        // call gl.useProgram for the program needed to draw.\n        this.webgl_context.useProgram(this.trajectories_program);\n        // setup uniforms for the thing you want to draw\n        this.webgl_context.uniform2f(\n            this.trajectories_resolution_uniform_location,\n            universe_width * 0.5,\n            universe_height * 0.5\n        );\n        // call gl.drawArrays\n        this.webgl_context.drawArrays(\n            this.webgl_context.TRIANGLES,\n            offset,\n            data_count\n        );\n    }\n\n    //\n    // Draw launchers\n    //\n    draw_launchers(\n        data,\n        universe_width,\n        universe_height\n    ) {\n        const size = 2;\n        const type = this.webgl_context.FLOAT;\n        const normalize = false;\n        const stride = 0;\n        const offset = 0;\n        const data_count = data.length / size;\n        // bind the vertex array for that thing : call gl.bindVertexArray\n        this.webgl_context.bindVertexArray(this.launchers_vao);\n        // for each attribute call gl.bindBuffer, bufferData, gl.vertexAttribPointer, gl.enableVertexAttribArray\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.launchers_position_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.launchers_position_attribute_location,\n            size,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.launchers_position_attribute_location\n        );\n        // call gl.useProgram for the program needed to draw.\n        this.webgl_context.useProgram(this.launchers_program);\n        // setup uniforms for the thing you want to draw\n        this.webgl_context.uniform2f(\n            this.launchers_resolution_uniform_location,\n            universe_width * 0.5,\n            universe_height * 0.5\n        );\n        // call gl.drawArrays\n        this.webgl_context.drawArrays(this.webgl_context.LINES, offset, data_count);\n    }\n\n    //\n    // Draw current launcher\n    //\n    draw_current_launcher(\n        data,\n        universe_width,\n        universe_height\n    ) {\n        const size = 2;\n        const type = this.webgl_context.FLOAT;\n        const normalize = false;\n        const stride = 0;\n        const offset = 0;\n        const data_count = data.length / size;\n        // bind the vertex array for that thing : call gl.bindVertexArray\n        this.webgl_context.bindVertexArray(this.current_launcher_vao);\n        // for each attribute call gl.bindBuffer, bufferData, gl.vertexAttribPointer, gl.enableVertexAttribArray\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.current_launcher_position_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.current_launcher_position_attribute_location,\n            size,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.current_launcher_position_attribute_location\n        );\n        // call gl.useProgram for the program needed to draw.\n        this.webgl_context.useProgram(this.current_launcher_program);\n        // setup uniforms for the thing you want to draw\n        this.webgl_context.uniform2f(\n            this.current_launcher_resolution_uniform_location,\n            universe_width * 0.5,\n            universe_height * 0.5\n        );\n        // call gl.drawArrays\n        this.webgl_context.drawArrays(this.webgl_context.LINES, offset, data_count);\n    }\n\n    //\n    // Draw links\n    //\n    draw_links(data, universe_width, universe_height) {\n        const links_data_count = data.length / 2;\n        const size = 2;          // 2 components per iteration\n        const type = this.webgl_context.FLOAT;   // the data is 32bit floats\n        const normalize = false; // don't normalize the data\n        const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n        const offset = 0;        // start at the beginning of the buffer\n        // bind the vertex array for that thing : call gl.bindVertexArray\n        this.webgl_context.bindVertexArray(this.links_vao);\n        // for each attribute call gl.bindBuffer, bufferData, gl.vertexAttribPointer, gl.enableVertexAttribArray\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.links_position_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(data),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.links_position_attribute_location,\n            size,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.links_position_attribute_location\n        );\n        // call gl.useProgram for the program needed to draw.\n        this.webgl_context.useProgram(this.links_program);\n        // setup uniforms for the thing you want to draw\n        this.webgl_context.uniform2f(this.links_resolution_uniform_location,\n            universe_width * 0.5,\n            universe_height * 0.5\n        );\n        // call gl.drawArrays\n        this.webgl_context.drawArrays(this.webgl_context.LINES, offset, links_data_count);\n    }\n\n    //\n    // Draw particles\n    //\n    draw_particles(data, universe_width, universe_height) {\n        let data_positions = [];\n        let data_centers = [];\n        let data_radiuses = [];\n        for (let i = 0, l = data.length, c = 3 ; i < l ; i += c) {\n            const length = data[i + 2];\n            data_positions.push(...[\n                data[i] - length, data[i + 1] - length,\n                data[i] + length, data[i + 1] - length,\n                data[i] - length, data[i + 1] + length,\n                data[i] + length, data[i + 1] + length,\n                data[i] + length, data[i + 1] - length,\n                data[i] - length, data[i + 1] + length\n            ]);\n        }\n        for (let i = 0, l = data.length, c = 3 ; i < l ; i += c) {\n            const length = 0;\n            data_centers.push(...[\n                data[i] - length, data[i + 1] - length,\n                data[i] + length, data[i + 1] - length,\n                data[i] - length, data[i + 1] + length,\n                data[i] + length, data[i + 1] + length,\n                data[i] + length, data[i + 1] - length,\n                data[i] - length, data[i + 1] + length\n            ]);\n        }\n        for (let i = 0, l = data.length, c = 3 ; i < l ; i += c) {\n            const radius = data[i + 2];\n            data_radiuses.push(...[\n                radius,\n                radius,\n                radius,\n                radius,\n                radius,\n                radius\n            ]);\n        }\n        const data_count = data_positions.length / 2;\n        const size = 2;          // 2 components per iteration\n        const type = this.webgl_context.FLOAT;   // the data is 32bit floats\n        const normalize = false; // don't normalize the data\n        const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n        const offset = 0;        // start at the beginning of the buffer\n        // bind the vertex array for that thing : call gl.bindVertexArray\n        this.webgl_context.bindVertexArray(this.particles_vao);\n        // for each attribute call gl.bindBuffer, bufferData, gl.vertexAttribPointer, gl.enableVertexAttribArray\n        if (true) {\n            this.webgl_context.bindBuffer(\n                this.webgl_context.ARRAY_BUFFER,\n                this.particles_position_buffer\n            );\n            this.webgl_context.bufferData(\n                this.webgl_context.ARRAY_BUFFER,\n                new Float32Array(data_positions),\n                this.webgl_context.STATIC_DRAW\n            );\n            this.webgl_context.vertexAttribPointer(\n                this.particles_position_attribute_location,\n                size,\n                type,\n                normalize,\n                stride,\n                offset\n            );\n            this.webgl_context.enableVertexAttribArray(\n                this.particles_position_attribute_location\n            );\n        }\n        if (true) {\n            this.webgl_context.bindBuffer(\n                this.webgl_context.ARRAY_BUFFER,\n                this.particles_center_buffer\n            );\n            this.webgl_context.bufferData(\n                this.webgl_context.ARRAY_BUFFER,\n                new Float32Array(data_centers),\n                this.webgl_context.STATIC_DRAW\n            );\n            this.webgl_context.vertexAttribPointer(\n                this.particles_center_attribute_location,\n                size,\n                type,\n                normalize,\n                stride,\n                offset\n            );\n            this.webgl_context.enableVertexAttribArray(\n                this.particles_center_attribute_location\n            );\n        }\n        if (true) {\n            this.webgl_context.bindBuffer(\n                this.webgl_context.ARRAY_BUFFER,\n                this.particles_radius_buffer\n            );\n            this.webgl_context.bufferData(\n                this.webgl_context.ARRAY_BUFFER,\n                new Float32Array(data_radiuses),\n                this.webgl_context.STATIC_DRAW\n            );\n            this.webgl_context.vertexAttribPointer(\n                this.particles_radius_attribute_location,\n                1,\n                type,\n                normalize,\n                stride,\n                offset\n            );\n            this.webgl_context.enableVertexAttribArray(\n                this.particles_radius_attribute_location\n            );\n        }\n        // call gl.useProgram for the program needed to draw.\n        this.webgl_context.useProgram(this.particles_program);\n        // setup uniforms for the thing you want to draw\n        this.webgl_context.uniform2f(\n            this.particles_resolution_uniform_location,\n            universe_width * 0.5,\n            universe_height * 0.5\n        );\n        // call gl.drawArrays\n        this.webgl_context.drawArrays(\n            this.webgl_context.TRIANGLES,\n            offset,\n            data_count\n        );\n    }\n\n    //\n    // Clear the canavs\n    //\n    clear() {\n        this.webgl_context.viewport(\n            0,\n            0,\n            this.webgl_context.canvas.width,\n            this.webgl_context.canvas.height\n        );\n        this.webgl_context.clearColor(0, 0, 0, 0);\n        this.webgl_context.clear(this.webgl_context.COLOR_BUFFER_BIT);\n    }\n\n    //\n    // Resize the canvas\n    //\n    resize() {\n        const canvas = this.webgl_context.canvas;\n        var displayWidth  = canvas.clientWidth;\n        var displayHeight = canvas.clientHeight;\n        // Check if the canvas is not the same size.\n        if (canvas.width !== displayWidth ||\n          canvas.height !== displayHeight) {\n            // Make the canvas the same size\n            canvas.width  = displayWidth;\n            canvas.height = displayHeight;\n        }\n    }\n\n    //\n    // Update data used to draw link trails \n    //\n    update_thrusting_link_trail_data(\n        links_state_data\n    ) {\n        this.thrusting_link_trails_positions_data = [];\n        this.thrusting_link_trails_thrust_activated_data = [];\n        this.thrusting_link_trails_age_data = [];\n        for (let i = 0, l = links_state_data.length, c = 10 ; i < l ; i += c) {\n            this.thrusting_link_trails_positions_data.push(\n                // First triangle\n                links_state_data[i+2], links_state_data[i+3],\n                links_state_data[i], links_state_data[i+1],\n                links_state_data[i+4], links_state_data[i+5],\n                // Second triangle\n                links_state_data[i+4], links_state_data[i+5],\n                links_state_data[i+2], links_state_data[i+3],\n                links_state_data[i+6], links_state_data[i+7]\n            );\n            this.thrusting_link_trails_thrust_activated_data.push(\n                links_state_data[i+8],\n                links_state_data[i+8],\n                links_state_data[i+8],\n                links_state_data[i+8],\n                links_state_data[i+8],\n                links_state_data[i+8]\n            );\n            this.thrusting_link_trails_age_data.push(\n                links_state_data[i+9],\n                links_state_data[i+9],\n                links_state_data[i+9],\n                links_state_data[i+9],\n                links_state_data[i+9],\n                links_state_data[i+9]\n            );\n        }\n    }\n\n    //\n    // Draw thrusting links trails\n    //\n    draw_thrusting_links_trails(\n        positions_data,\n        universe_width,\n        universe_height,\n        thrust_activated_data,\n        age_data\n    ) {\n        const size = 2;\n        const type = this.webgl_context.FLOAT;   // the data is 32bit floats\n        const normalize = false; // don't normalize the data\n        const stride = 0;        // 0 = move forward size * sizeof(type) each iteration to get the next position\n        const offset = 0;        // start at the beginning of the buffer\n        const data_count = positions_data.length / size;\n        // bind the vertex array for that thing : call gl.bindVertexArray\n        this.webgl_context.bindVertexArray(this.thrusting_links_trails_vao);\n        // for each attribute call gl.bindBuffer, bufferData, gl.vertexAttribPointer, gl.enableVertexAttribArray\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.thrusting_links_trails_position_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(positions_data),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.thrusting_links_trails_position_attribute_location,\n            size,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.thrusting_links_trails_position_attribute_location\n        );\n        //\n        // Links thrust activated\n        //\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.thrusting_links_trails_thrust_activated_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(thrust_activated_data),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.thrusting_links_trails_thrust_activated_attribute_location,\n            1,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.thrusting_links_trails_thrust_activated_attribute_location\n        );\n        //\n        // Links thrust age\n        //\n        this.webgl_context.bindBuffer(\n            this.webgl_context.ARRAY_BUFFER,\n            this.thrusting_links_trails_age_buffer\n        );\n        this.webgl_context.bufferData(\n            this.webgl_context.ARRAY_BUFFER,\n            new Float32Array(age_data),\n            this.webgl_context.STATIC_DRAW\n        );\n        this.webgl_context.vertexAttribPointer(\n            this.thrusting_links_trails_age_attribute_location,\n            1,\n            type,\n            normalize,\n            stride,\n            offset\n        );\n        this.webgl_context.enableVertexAttribArray(\n            this.thrusting_links_trails_age_attribute_location\n        );\n        // call gl.useProgram for the program needed to draw.\n        this.webgl_context.useProgram(this.thrusting_links_trails_program);\n        // setup uniforms for the thing you want to draw\n        this.webgl_context.uniform2f(\n            this.thrusting_links_trails_resolution_uniform_location,\n            universe_width * 0.5,\n            universe_height * 0.5\n        );\n        // call gl.drawArrays\n        this.webgl_context.drawArrays(this.webgl_context.TRIANGLES, offset, data_count);\n    }\n}\n\n\n\n//# sourceURL=webpack:///./webgl-renderer.js?");

/***/ })

}]);