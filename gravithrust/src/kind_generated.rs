// generated by build.rs
use crate::error;
use serde::Deserialize;
use serde::Serialize;
use wasm_bindgen::prelude::wasm_bindgen;
#[wasm_bindgen]
#[derive(Serialize, Deserialize, Hash, Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum Kind {
    ElectroFieldLauncher = 0,
    Anchor           = 1,
    CoalCollector    = 2,
    IceCollector     = 3,
    Light            = 4,
    IronCollector    = 5,
    WaterCollector   = 6,
    SunCore          = 7,
    HeatCollector    = 8,
    Water            = 9,
    Core             = 10,
    Static           = 11,
    IronOreDepot     = 12,
    Armor            = 13,
    Cargo            = 14,
    CoalAsteroid     = 15,
    Battery          = 16,
    PlasmaElectroFieldCollector = 17,
    IceAsteroid      = 18,
    IceMelter        = 19,
    IronAsteroid     = 20,
    PlasmaRefineryInput = 21,
    PlasmaRawCollector = 22,
    CoalDepot        = 23,
    EnergyCollector  = 24,
    EnergyCargo      = 25,
    IronOreCollector = 26,
    Booster          = 27,
    PlasmaCargo      = 28,
    Target           = 29,
    IronGangueCollector = 30,
    IceCargo         = 31,
    Flower           = 32,
    CoalCargo        = 33,
    PlasmaRawDepot   = 34,
    IronFurnace      = 35,
    IronOreCargo     = 36,
    Generator        = 37,
    PlasmaRefineryOutput = 38,
    Sun              = 39,
    EnergyDepot      = 40,
    Luciole          = 41,
}
pub fn kindstr_to_kind(x: &str) -> Kind {
    match x.trim().to_lowercase().as_str() {
        "electro_field_launcher" => Kind::ElectroFieldLauncher,
        "anchor" => Kind::Anchor,
        "coal_collector" => Kind::CoalCollector,
        "ice_collector" => Kind::IceCollector,
        "light" => Kind::Light,
        "iron_collector" => Kind::IronCollector,
        "water_collector" => Kind::WaterCollector,
        "sun_core" => Kind::SunCore,
        "heat_collector" => Kind::HeatCollector,
        "water" => Kind::Water,
        "core" => Kind::Core,
        "static" => Kind::Static,
        "iron_ore_depot" => Kind::IronOreDepot,
        "armor" => Kind::Armor,
        "cargo" => Kind::Cargo,
        "coal_asteroid" => Kind::CoalAsteroid,
        "battery" => Kind::Battery,
        "plasma_electro_field_collector" => Kind::PlasmaElectroFieldCollector,
        "ice_asteroid" => Kind::IceAsteroid,
        "ice_melter" => Kind::IceMelter,
        "iron_asteroid" => Kind::IronAsteroid,
        "plasma_refinery_input" => Kind::PlasmaRefineryInput,
        "plasma_raw_collector" => Kind::PlasmaRawCollector,
        "coal_depot" => Kind::CoalDepot,
        "energy_collector" => Kind::EnergyCollector,
        "energy_cargo" => Kind::EnergyCargo,
        "iron_ore_collector" => Kind::IronOreCollector,
        "booster" => Kind::Booster,
        "plasma_cargo" => Kind::PlasmaCargo,
        "target" => Kind::Target,
        "iron_gangue_collector" => Kind::IronGangueCollector,
        "ice_cargo" => Kind::IceCargo,
        "flower" => Kind::Flower,
        "coal_cargo" => Kind::CoalCargo,
        "plasma_raw_depot" => Kind::PlasmaRawDepot,
        "iron_furnace" => Kind::IronFurnace,
        "iron_ore_cargo" => Kind::IronOreCargo,
        "generator" => Kind::Generator,
        "plasma_refinery_output" => Kind::PlasmaRefineryOutput,
        "sun" => Kind::Sun,
        "energy_depot" => Kind::EnergyDepot,
        "luciole" => Kind::Luciole,
        _ => {
            let m = format!("invalid kind: {x}");
            error(&m);
            panic!("{}", m)
        }
    }
}
impl Kind {
    pub fn is_static(self) -> bool {
        matches!(self, Kind::IronFurnace | Kind::Static)
    }
}
