// generated by build.rs
use crate::error;
use serde::Deserialize;
use serde::Serialize;
use wasm_bindgen::prelude::wasm_bindgen;
#[wasm_bindgen]
#[derive(Serialize, Deserialize, Hash, Copy, Clone, Debug, PartialEq, Eq)]
#[repr(u32)]
pub enum Kind {
    Invalid          = 0,
    Default          = 1,
    Armor            = 2,
    Core             = 3,
    Booster          = 4,
    Sun              = 5,
    Light            = 6,
    Plant            = 7,
    Metal            = 8,
    Depot            = 9,
    Target           = 10,
    ElectroFieldLauncher = 11,
    Cargo            = 12,
    Plasma           = 13,
    Field            = 14,
    Anchor           = 15,
    SunCore          = 16,
    ElectroField     = 17,
    PlasmaElectroField = 18,
    PlasmaCargo      = 19,
    PlasmaElectroFieldCollector = 20,
    PlasmaRawDepot   = 21,
    PlasmaRawCollector = 22,
    PlasmaRefineryInput = 23,
    PlasmaRefineryOutput = 24,
    Static           = 25,
    Ice              = 26,
    Water            = 27,
    Heat             = 28,
    HeatLauncher     = 29,
    Generator        = 30,
    Fuel             = 31,
    Electricity      = 32,
    IronFurnace      = 33,
    CoalCargo        = 34,
    CoalAsteroid     = 35,
    CoalCollector    = 36,
    IronCargo        = 37,
    IronCollector    = 38,
    IronAsteroid     = 39,
    IronOreCargo     = 40,
    IronOreCollector = 41,
    Luciole          = 42,
    Vers             = 43,
    IceMelter        = 44,
    IceCollector     = 45,
    IceCargo         = 46,
    IceAsteroid      = 47,
    Battery          = 48,
    IronGangueCollector = 49,
    CoalDepot        = 50,
    IronOreDepot     = 51,
    HeatCollector    = 52,
    EnergyCargo      = 53,
    EnergyCollector  = 54,
    WaterCollector   = 55,
    Nectar           = 56,
    Flower           = 57,
    EnergyDepot      = 58,
}
pub fn kindstr_to_kind(x: &str) -> Kind {
    match x.trim().to_lowercase().as_str() {
        "invalid" => Kind::Invalid,
        "default" => Kind::Default,
        "armor" => Kind::Armor,
        "core" => Kind::Core,
        "booster" => Kind::Booster,
        "sun" => Kind::Sun,
        "light" => Kind::Light,
        "plant" => Kind::Plant,
        "metal" => Kind::Metal,
        "depot" => Kind::Depot,
        "target" => Kind::Target,
        "electro_field_launcher" => Kind::ElectroFieldLauncher,
        "cargo" => Kind::Cargo,
        "plasma" => Kind::Plasma,
        "field" => Kind::Field,
        "anchor" => Kind::Anchor,
        "sun_core" => Kind::SunCore,
        "electro_field" => Kind::ElectroField,
        "plasma_electro_field" => Kind::PlasmaElectroField,
        "plasma_cargo" => Kind::PlasmaCargo,
        "plasma_electro_field_collector" => Kind::PlasmaElectroFieldCollector,
        "plasma_raw_depot" => Kind::PlasmaRawDepot,
        "plasma_raw_collector" => Kind::PlasmaRawCollector,
        "plasma_refinery_input" => Kind::PlasmaRefineryInput,
        "plasma_refinery_output" => Kind::PlasmaRefineryOutput,
        "static" => Kind::Static,
        "ice" => Kind::Ice,
        "water" => Kind::Water,
        "heat" => Kind::Heat,
        "heat_launcher" => Kind::HeatLauncher,
        "generator" => Kind::Generator,
        "fuel" => Kind::Fuel,
        "electricity" => Kind::Electricity,
        "iron_furnace" => Kind::IronFurnace,
        "coal_cargo" => Kind::CoalCargo,
        "coal_asteroid" => Kind::CoalAsteroid,
        "coal_collector" => Kind::CoalCollector,
        "iron_cargo" => Kind::IronCargo,
        "iron_collector" => Kind::IronCollector,
        "iron_asteroid" => Kind::IronAsteroid,
        "iron_ore_cargo" => Kind::IronOreCargo,
        "iron_ore_collector" => Kind::IronOreCollector,
        "luciole" => Kind::Luciole,
        "vers" => Kind::Vers,
        "ice_melter" => Kind::IceMelter,
        "ice_collector" => Kind::IceCollector,
        "ice_cargo" => Kind::IceCargo,
        "ice_asteroid" => Kind::IceAsteroid,
        "battery" => Kind::Battery,
        "iron_gangue_collector" => Kind::IronGangueCollector,
        "coal_depot" => Kind::CoalDepot,
        "iron_ore_depot" => Kind::IronOreDepot,
        "heat_collector" => Kind::HeatCollector,
        "energy_cargo" => Kind::EnergyCargo,
        "energy_collector" => Kind::EnergyCollector,
        "water_collector" => Kind::WaterCollector,
        "nectar" => Kind::Nectar,
        "flower" => Kind::Flower,
        "energy_depot" => Kind::EnergyDepot,
        _ => {
            error(&format!("invalid kind: {x}"));
            panic!("invalid kind")
        }
    }
}
impl Kind {
    pub fn capacity(self) -> u32 {
        #[allow(clippy::match_same_arms)]
        match self {
            Kind::Booster => 100,
            Kind::PlasmaRawDepot => 20,
            Kind::PlasmaCargo => 2,
            Kind::PlasmaElectroField => 1,
            Kind::ElectroField => 1,
            Kind::ElectroFieldLauncher => 2500,
            Kind::Core => 1,
            Kind::PlasmaRefineryInput => 20,
            Kind::PlasmaRawCollector => 2,
            Kind::PlasmaElectroFieldCollector => 2,
            _ => 0,
        }
    }

    pub fn soft_capacity(self) -> u32 {
        match self {
            Kind::PlasmaRawDepot => 20,
            Kind::PlasmaCargo => 2,
            Kind::PlasmaRefineryInput => 20,
            _ => 0,
        }
    }

    pub fn is_static(self) -> bool {
        matches!(self, Kind::Anchor | Kind::Static | Kind::IronFurnace)
    }
}
